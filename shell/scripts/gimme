#!/usr/bin/env bash
# A wrapper script for many unix package managers.
# by Miles Whittaker <mjwhitta@gmail.com>
#
# --------------------------------------------------------------------
# The MIT License (MIT)
#
# Copyright (c) 2018 Miles Whittaker
#
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation files
# (the "Software"), to deal in the Software without restriction,
# including without limitation the rights to use, copy, modify, merge,
# publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
# BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
# --------------------------------------------------------------------

### Helpers begin
check_deps() {
    for d in "${deps[@]}"; do
        [[ -n $(command -v "$d") ]] || errx 128 "$d is not installed"
    done; unset d
}
err() { echo -e "${color:+\e[31m}[!] $*\e[0m"; }
errx() { err "${*:2}"; exit "$1"; }
good() { echo -e "${color:+\e[32m}[+] $*\e[0m"; }
info() { echo -e "${color:+\e[37m}[*] $*\e[0m"; }
long_opt() {
    local arg shift="0"
    case "$1" in
        "--"*"="*) arg="${1#*=}"; [[ -n $arg ]] || usage 127 ;;
        *) shift="1"; shift; [[ $# -gt 0 ]] || usage 127; arg="$1" ;;
    esac
    echo "$arg"
    return $shift
}
subinfo() { echo -e "${color:+\e[36m}[=] $*\e[0m"; }
warn() { echo -e "${color:+\e[33m}[-] $*\e[0m"; }
### Helpers end

gimme_apk() {
    if [[ -n $(command -v apk) ]]; then
        case "$action" in
            "install") $sudo apk add "$@" ;;
            "remove")
                [[ -n $nosave ]] || $sudo apk del -r "$@"
                [[ -z $nosave ]] || $sudo apk del --purge -r "$@"
                ;;
            "search") apk search "$@" ;;
            "update")
                $sudo apk update
                $sudo apk upgrade -a -U
                ;;
        esac
    fi
}

gimme_apt() {
    if [[ -n $(command -v apt) ]]; then
        case "$action" in
            "install") $sudo apt install -q "$@" ;;
            "remove")
                if [[ -z $nosave ]]; then
                    $sudo apt remove "$@"
                elif [[ -n $nosave ]]; then
                    $sudo apt purge "$@"
                    $sudo apt autoremove
                fi
                ;;
            "search") apt-cache search "$@" ;;
            "update")
                for cmd in \
                    update \
                    upgrade \
                    dist-upgrade \
                    autoremove \
                    autoclean
                do
                    DEBIAN_FRONTEND="noninteractive" \
                        $sudo apt $cmd -qy
                done
                ;;
        esac
    elif [[ -n $(command -v apt-get) ]]; then
        case "$action" in
            "install") $sudo apt-get install -q "$@" ;;
            "remove")
                if [[ -z $nosave ]]; then
                    $sudo apt-get remove "$@"
                elif [[ -n $nosave ]]; then
                    $sudo apt-get purge "$@"
                    $sudo apt-get autoremove
                fi
                ;;
            "search") apt-cache search "$@" ;;
            "update")
                for cmd in \
                    update \
                    upgrade \
                    dist-upgrade \
                    autoremove \
                    autoclean
                do
                    DEBIAN_FRONTEND="noninteractive" \
                        $sudo apt-get $cmd -qy
                done
                ;;
        esac
    fi
}

gimme_brew() {
    if [[ -n $(command -v brew) ]]; then
        case "$action" in
            "install") brew install "$@" ;;
            "remove") brew remove "$@" ;;
            "search") brew search "$@" ;;
            "update")
                for cmd in update upgrade cleanup; do
                    brew $cmd
                done; unset cmd
                while read -r cask; do
                    brew cask install "$cask"
                done < <(brew cask list); unset cask
                brew cask cleanup
                ;;
        esac
    fi
}

gimme_crew() {
    if [[ -n $(command -v crew) ]]; then
        case "$action" in
            "install") crew install "$@" ;;
            "remove") crew remove "$@" ;;
            "search") crew search "$@" ;;
            "update") crew update && yes | crew upgrade ;;
        esac
    fi
}

gimme_dnf() {
    if [[ -n $(command -v atomic) ]]; then
        case "$action" in
            "install") $sudo atomic host install "$@" ;;
            "remove") $sudo atomic host uninstall "$@" ;;
            "search") echo "Not supported" ;;
            "update") $sudo atomic host upgrade ;;
        esac
    elif [[ -n $(command -v dnf) ]]; then
        case "$action" in
            "install") $sudo dnf install "$@" ;;
            "remove") $sudo dnf remove "$@" ;;
            "search") dnf search -q "$@" ;;
            "update") $sudo dnf upgrade -y ;;
        esac
    elif [[ -n $(command -v yum) ]]; then
        case "$action" in
            "install") $sudo yum install "$@" ;;
            "remove") $sudo yum remove "$@" ;;
            "search") yum search "$@" ;;
            "update") $sudo yum update -y ;;
        esac
    fi
}

gimme_pacman() {
    if [[ -n $(command -v yay) ]]; then
        case "$action" in
            "install") yay -S "$@" ;;
            "remove")
                [[ -n $nosave ]] || yay -Rs "$@"
                [[ -z $nosave ]] || yay -Rns "$@"
                ;;
            "search") yay -Ss "$@" ;;
            "update")
                yay -Syyu --noconfirm
                yay -Sc --noconfirm
                ;;
        esac
    elif [[ -n $(command -v ruaur) ]]; then
        case "$action" in
            "install") ruaur -S "$@" ;;
            "remove")
                [[ -n $nosave ]] || ruaur -R "$@"
                [[ -z $nosave ]] || ruaur -Rn "$@"
                ;;
            "search") ruaur -Ss "$@" ;;
            "update")
                ruaur -Su --noconfirm
                ruaur -Sc --noconfirm
                ;;
        esac
    elif [[ -n $(command -v pacman) ]]; then
        case "$action" in
            "install") $sudo pacman -S "$@" ;;
            "remove")
                [[ -n $nosave ]] || $sudo pacman -Rs "$@"
                [[ -z $nosave ]] || $sudo pacman -Rns "$@"
                ;;
            "search") pacman -Ss "$@" ;;
            "update")
                $sudo pacman -Syyu --noconfirm
                $sudo pacman -Sc --noconfirm
                ;;
        esac
    fi
}

gimme_zypper() {
    local type="$1" && shift
    if [[ -n $(command -v transactional-update) ]]; then
        case "$action" in
            "install")
                $sudo transactional-update pkg in \
                    --no-recommends "$@"
                ;;
            "remove")
                $sudo transactional-update pkg rm -u "$@" ;;
            "search") zypper search "$@" ;;
            "update")
                case "$type" in
                    "leap") $sudo transactional-update up ;;
                    "tw") $sudo transactional-update dup ;;
                esac
                ;;
        esac
    elif [[ -n $(command -v zypper) ]]; then
        case "$action" in
            "install")
                $sudo zypper install --no-recommends "$@" ;;
            "remove") $sudo zypper remove --clean-deps "$@" ;;
            "search") zypper search "$@" ;;
            "update")
                $sudo zypper update -y
                $sudo zypper dist-upgrade -y
                ;;
        esac
    fi
}

usage() {
    cat <<EOF
Usage: ${0##*/} [OPTIONS] [pkg]...

Automatically uses the correct package manager. Default behavior is to
install.

Options:
    -h, --help       Display this help message
    -i, --install    Install package(s) (default)
    --no-color       Disable colorized output
    -n, --nosave     Also remove configs
    -R, --remove     Remove package(s)
    -s, --search     Search for matching packages
    -u, --update     Update installed packages

EOF
    exit "$1"
}

declare -a args deps
unset help nosave
action="install"
color="true"
deps+=("awk")
deps+=("grep")
sudo="$(command -v sudo)"

# Check for missing dependencies
check_deps

# Parse command line options
while [[ $# -gt 0 ]]; do
    case "$1" in
        "--") shift && args+=("$@") && break ;;
        "-h"|"--help") help="true" ;;
        "-i"|"--install") action="install" ;;
        "--no color") unset color ;;
        "-n"|"--nosave") nosave="true" ;;
        "-R"|"--remove") action="remove" ;;
        "-Rn") action="remove"; nosave="true" ;;
        "-s"|"--search") action="search" ;;
        "-u"|"--update") action="update" ;;
        *) args+=("$1") ;;
    esac
    shift
done
[[ ${#args[@]} -eq 0 ]] || set -- "${args[@]}"

# Check for valid params
[[ -z $help ]] || usage 0
case "$action" in
    "install") [[ $# -ne 0 ]] || usage 1 ;;
    "remove") [[ $# -ne 0 ]] || usage 1 ;;
    "search") [[ $# -ne 0 ]] || usage 1 ;;
    "update") [[ $# -eq 0 ]] || usage 1 ;;
esac

case "$(uname -s)" in
    "Darwin") gimme_brew "$@" ;;
    "Linux")
        # grep and awk b/c alpine/busybox
        os="$(
            grep -Eos "^ID\=\"?[^\"]+" /etc/os-release | \
            awk -F "=" '{print $2}'
        )"
        case "$os" in
            "alpine") gimme_apk "$@" ;;
            "arch"|"archarm") gimme_pacman "$@" ;;
            "chrom"*"os") gimme_crew "$@" ;;
            "debian"|"raspbian") gimme_apt "$@" ;;
            "fedora") gimme_dnf "$@" ;;
            "opensuse"*"leap") gimme_zypper "leap" "$@" ;;
            "opensuse"*"tumbleweed") gimme_zypper "tw" "$@" ;;
            *) echo "Unsupported package manager!" ;;
        esac
        ;;
    *) echo "Unsupported OS!" ;;
esac
