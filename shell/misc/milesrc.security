# Security functions + an alias
if [[ -n $(installed docker) ]]; then
    function create_tmp_docker_entry() {
        cat >/tmp/dockerentry.sh <<EOF
#!/usr/bin/env bash

# Default group (user:1000)
gid="\${DKR_GID:-1000}"
gname="\${DKR_GNAME:-user}"

# Default user (user:1000)
uid="\${DKR_UID:-1000}"
uname="\${DKR_UNAME:-user}"

# Does user with UID already exist?
old_uid="\$(id -nu "\$uid" 2>/dev/null)"

# If root or UID of 0 provided, just run command
if [[ \$(id -u) -ne 0 ]] || [[ \$uid -eq 0 ]]; then
    exec "\$@"
fi

# Create group if it doesn't exist
groupadd -f "\$gname"
groupmod -g "\$gid" "\$gname" 2>/dev/null

# Create user if they don't exist
[[ -z \$old_uid ]] || usermod -g "\$gid" -l "\$uname" "\$old_uid"
useradd -g "\$gid" -ou "\$uid" "\$uname" 2>/dev/null

# Sudo (a few different ways)
groupadd -f sudo
groupadd -f wheel
usermod -a -G sudo,wheel "\$uname"
echo "\$uname ALL=(ALL) NOPASSWD: ALL" >"/etc/sudoers.d/\$uname"

# Run command as specified user
if [[ -n \$(command -v sudo) ]]; then
    sudo -u "\$uname" "\$@"
else
    su -c "\$@" "\$uname"
fi
EOF
        chmod 700 /tmp/dockerentry.sh
    }

    alias dclean="docker system prune -af --volumes"

    function dsh() {
        local image="$1" && shift
        local name="$(echo "${image%%:*}" | sed -r "s/\W+/-/g")"
        name+="_$(head -c 8 /dev/random | xxd -p)"

        docker run -i --name "$name" --rm -t "$image" "$@"
    }

    function dshpwd() {
        local image="$1" && shift
        local name="$(echo "${image%%:*}" | sed -r "s/\W+/-/g")"
        name+="_$(head -c 8 /dev/random | xxd -p)"

        docker run -i --name "$name" --rm -tv "$(pwd)":/pwd -w /pwd \
            "$image" "$@"
    }

    function msfconsole() {
        local entrydir="/usr/src/metasploit-framework"
        local image="metasploitframework/metasploit-framework:latest"
        local name="msfconsole_$(head -c 8 /dev/random | xxd -p)"

        mkdir -p "$HOME/.msf4"
        docker run -e MSF_GID=$(id -g) -e MSF_UID=$(id -u) \
            --entrypoint "$entrydir/docker/entrypoint.sh" -i \
            --name "$name" -p 4444:4444 -p 8000-8500:8000-8500 --rm \
            -tv "$HOME/.msf4":/home/msf/.msf4 -v "$(pwd)":/pwd:Z \
            -w /pwd $image "$entrydir/msfconsole" -q "$@"
    }

    function msfvenom() {
        local entrydir="/usr/src/metasploit-framework"
        local image="metasploitframework/metasploit-framework:latest"
        local name="msfvenom_$(head -c 8 /dev/random | xxd -p)"

        mkdir -p "$HOME/.msf4"
        docker run -e MSF_GID=$(id -g) -e MSF_UID=$(id -u) \
            --entrypoint "$entrydir/docker/entrypoint.sh" -i \
            --name "$name" --rm -tv "$HOME/.msf4":/home/msf/.msf4 \
            -v "$(pwd)":/pwd:Z -w /pwd $image "$entrydir/msfvenom" \
            "$@"
    }

    function r2() {
        create_tmp_docker_entry
        docker run --cap-add=SYS_PTRACE -e DKR_GID="$(id -g)" \
            -e DKR_GNAME="$(id -gn)" -e DKR_UID="$(id -u)" \
            -e DKR_UNAME="$(id -nu)" --entrypoint /dockerentry.sh -i \
            --name "r2_$(head -c 8 /dev/random | xxd -p)" --rm -t \
            -u root -v /tmp/dockerentry.sh:/dockerentry.sh \
            -v "$(pwd)":/pwd:Z -w /pwd radare/radare2 r2 "$@"
    }

    function r2sh() {
        create_tmp_docker_entry
        docker run --cap-add=SYS_PTRACE -e DKR_GID="$(id -g)" \
            -e DKR_GNAME="$(id -gn)" -e DKR_UID="$(id -u)" \
            -e DKR_UNAME="$(id -nu)" --entrypoint /dockerentry.sh -i \
            --name "r2_$(head -c 8 /dev/random | xxd -p)" --rm -t \
            -u root -v /tmp/dockerentry.sh:/dockerentry.sh \
            -v "$(pwd)":/pwd:Z -w /pwd radare/radare2 bash
    }
fi

function ngrok() {
    local port="${1:-8080}"
    local service="${2:-http}"

    case "$*" in
        *"-h"*|*"--help"*)
            echo "Usage: ngrok [port] [service]"
            echo
            echo "DESCRIPTION"
            echo -n "    Punch a hole thru the firewall using SSH "
            echo "and ngrok servers. Default"
            echo "    port/service is 8080/http(s)."
            echo
            echo "OPTIONS"
            echo "    -h, --help    Display this help message"
            echo
            echo "SERVICES"
            echo "    http(s)"
            echo "    tls"
            return
            ;;
    esac

    case "$service" in
        "https") service="http" ;;
        "tls")
            # Free ngrok doesn't allow TLS so use socat if we got it
            if [[ -n $(command -v socat) ]]; then
                oldport="$port"
                ((port += 1))
                service="http"

                # Un-TLS and use HTTP
                socat tcp-listen:$port,fork,reuseaddr \
                    openssl:localhost:$oldport,verify=0 &
            else
                "No socat found. Can't use TLS service w/o socat."
                return
            fi
            ;;
    esac

    ssh -o "ControlMaster no" -o "IdentitiesOnly yes" \
        -R 0:localhost:"$port" tunnel.us.ngrok.com "$service"

    # Kill socat if started
    [[ -z $(command -v socat) ]] || pkill -P $$ socat
}
