#!/usr/bin/env bash
# A wrapper script for many unix package managers.
# by Miles Whittaker <mjwhitta@gmail.com>
#
# --------------------------------------------------------------------
# The MIT License (MIT)
#
# Copyright (c) 2018 Miles Whittaker
#
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation files
# (the "Software"), to deal in the Software without restriction,
# including without limitation the rights to use, copy, modify, merge,
# publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
# BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
# --------------------------------------------------------------------

### Helpers begin
check_deps() {
    local missing
    for d in "${deps[@]}"; do
        if [[ -z $(command -v "$d") ]]; then
            # Force absolute path
            if [[ ! -e "/$d" ]]; then
                err "$d was not found"
                missing="true"
            fi
        fi
    done; unset d
    [[ -z $missing ]] || exit 128
}
err() { echo -e "${color:+\e[31m}[!] $*${color:+\e[0m}" >&2; }
errx() { err "${*:2}"; exit "$1"; }
good() { echo -e "${color:+\e[32m}[+] $*${color:+\e[0m}"; }
info() { echo -e "${color:+\e[37m}[*] $*${color:+\e[0m}"; }
long_opt() {
    local arg shift="0"
    case "$1" in
        "--"*"="*) arg="${1#*=}"; [[ -n $arg ]] || return 127 ;;
        *) shift="1"; shift; [[ $# -gt 0 ]] || return 127; arg="$1" ;;
    esac
    echo "$arg"
    return $shift
}
subinfo() { echo -e "${color:+\e[36m}[=] $*${color:+\e[0m}"; }
warn() { echo -e "${color:+\e[33m}[-] $*${color:+\e[0m}"; }
### Helpers end

gimme_apk() {
    if [[ -n $(command -v apk) ]]; then
        case "$action" in
            "install") $sudo apk add "$@" ;;
            "remove")
                [[ -n $nosave ]] || $sudo apk del -r "$@"
                [[ -z $nosave ]] || $sudo apk del --purge -r "$@"
                ;;
            "search") apk search "$@" ;;
            "update")
                $sudo apk update
                $sudo apk upgrade -a -U
                ;;
        esac
    fi
}

gimme_apt() {
    if [[ -n $(command -v apt) ]]; then
        case "$action" in
            "install") $sudo apt install -q "$@" ;;
            "remove")
                if [[ -z $nosave ]]; then
                    $sudo apt remove "$@"
                elif [[ -n $nosave ]]; then
                    $sudo apt purge "$@"
                    $sudo apt autoremove
                fi
                ;;
            "search") apt-cache search "$@" ;;
            "update")
                for cmd in \
                    update \
                    upgrade \
                    dist-upgrade \
                    autoremove \
                    autoclean
                do
                    DEBIAN_FRONTEND="noninteractive" \
                        $sudo apt $cmd -qy
                done
                ;;
        esac
    elif [[ -n $(command -v apt-get) ]]; then
        case "$action" in
            "install") $sudo apt-get install -q "$@" ;;
            "remove")
                if [[ -z $nosave ]]; then
                    $sudo apt-get remove "$@"
                elif [[ -n $nosave ]]; then
                    $sudo apt-get purge "$@"
                    $sudo apt-get autoremove
                fi
                ;;
            "search") apt-cache search "$@" ;;
            "update")
                for cmd in \
                    update \
                    upgrade \
                    dist-upgrade \
                    autoremove \
                    autoclean
                do
                    DEBIAN_FRONTEND="noninteractive" \
                        $sudo apt-get $cmd -qy
                done
                ;;
        esac
    fi
}

gimme_brew() {
    if [[ -n $(command -v brew) ]]; then
        case "$action" in
            "install") brew install "$@" ;;
            "remove") brew remove "$@" ;;
            "search") brew search "$@" ;;
            "update")
                brew update && \
                brew upgrade && \
                brew upgrade $(brew list --cask)
                brew cleanup
                ;;
        esac
    fi
}

gimme_crew() {
    if [[ -n $(command -v crew) ]]; then
        case "$action" in
            "install") crew install "$@" ;;
            "remove") crew remove "$@" ;;
            "search") crew search "$@" ;;
            "update") crew update && yes | crew upgrade ;;
        esac
    fi
}

gimme_dnf() {
    if [[ -n $(command -v atomic) ]]; then
        case "$action" in
            "install") $sudo atomic host install "$@" ;;
            "remove") $sudo atomic host uninstall "$@" ;;
            "search") echo "Not supported" ;;
            "update") $sudo atomic host upgrade ;;
        esac
    elif [[ -n $(command -v dnf) ]]; then
        case "$action" in
            "install") $sudo dnf install "$@" ;;
            "remove") $sudo dnf remove "$@" ;;
            "search") dnf search -q "$@" ;;
            "update") $sudo dnf upgrade -y ;;
        esac
    elif [[ -n $(command -v yum) ]]; then
        case "$action" in
            "install") $sudo yum install "$@" ;;
            "remove") $sudo yum remove "$@" ;;
            "search") yum search "$@" ;;
            "update") $sudo yum update -y ;;
        esac
    fi
}

gimme_pacman() {
    if [[ -n $(command -v yay) ]]; then
        case "$action" in
            "install") yay -S "$@" ;;
            "remove")
                [[ -n $nosave ]] || yay -Rs "$@"
                [[ -z $nosave ]] || yay -Rns "$@"
                ;;
            "search") yay -Ss "$@" ;;
            "update")
                yay -Syyu --noconfirm
                yay -Sc --noconfirm
                ;;
        esac
    elif [[ -n $(command -v ruaur) ]]; then
        case "$action" in
            "install") ruaur -S "$@" ;;
            "remove")
                [[ -n $nosave ]] || ruaur -R "$@"
                [[ -z $nosave ]] || ruaur -Rn "$@"
                ;;
            "search") ruaur -Ss "$@" ;;
            "update")
                ruaur -Su --noconfirm
                ruaur -Sc --noconfirm
                ;;
        esac
    elif [[ -n $(command -v pacman) ]]; then
        case "$action" in
            "install") $sudo pacman -S "$@" ;;
            "remove")
                [[ -n $nosave ]] || $sudo pacman -Rs "$@"
                [[ -z $nosave ]] || $sudo pacman -Rns "$@"
                ;;
            "search") pacman -Ss "$@" ;;
            "update")
                $sudo pacman -Syyu --noconfirm
                $sudo pacman -Sc --noconfirm
                ;;
        esac
    fi
}

gimme_zypper() {
    local type="$1" && shift
    if [[ -n $(command -v transactional-update) ]]; then
        case "$action" in
            "install")
                $sudo transactional-update pkg in \
                    --no-recommends "$@"
                ;;
            "remove")
                $sudo transactional-update pkg rm -u "$@" ;;
            "search") zypper search "$@" ;;
            "update")
                case "$type" in
                    "leap") $sudo transactional-update up ;;
                    "tw") $sudo transactional-update dup ;;
                esac
                ;;
        esac
    elif [[ -n $(command -v zypper) ]]; then
        case "$action" in
            "install")
                $sudo zypper install --no-recommends "$@" ;;
            "remove") $sudo zypper remove --clean-deps "$@" ;;
            "search") zypper search "$@" ;;
            "update")
                $sudo zypper update -y
                $sudo zypper dist-upgrade -y
                ;;
        esac
    fi
}

usage() {
    cat <<EOF
Usage: ${0##*/} [OPTIONS] [pkg]...

DESCRIPTION
    Automatically uses the correct package manager. Default behavior
    is to install. If the only pkg provided is "gimme", the script
    will update itself with the newest version from GitLab.

OPTIONS
    -h, --help        Display this help message
    -i, --install     Install package(s) (default)
        --no-color    Disable colorized output
    -n, --nosave      Also remove configs
    -R, --remove      Remove package(s)
    -s, --search      Search for matching packages
    -u, --update      Update installed packages
    -v, --version     Show gimme version

EOF
    exit "$1"
}

declare -a args
unset help nosave
action="install"
color="true"
version="1.4.1"

# Parse command line options
while [[ $# -gt 0 ]]; do
    case "$1" in
        "--") shift; args+=("$@"); break ;;
        "-h"|"--help") help="true" ;;
        "-i"|"--install") action="install" ;;
        "--no-color") unset color ;;
        "-n"|"--nosave") nosave="true" ;;
        "-R"|"--remove") action="remove" ;;
        "-Rn") action="remove"; nosave="true" ;;
        "-s"|"--search") action="search" ;;
        "-u"|"--update") action="update" ;;
        "-v"|"-V"|"--version") action="version" ;;
        *) args+=("$1") ;;
    esac
    case "$?" in
        0) ;;
        1) shift ;;
        *) usage $? ;;
    esac
    shift
done
[[ ${#args[@]} -eq 0 ]] || set -- "${args[@]}"

# Help info
[[ -z $help ]] || usage 0

# Check for valid OS
case "$(uname -s)" in
    "Darwin") os="macOS" ;;
    "Linux")
        # grep -P is best, but alas, some OS do not have that option
        # (alpine/busybox)
        os="$(
            grep -Eos "^ID\=\"?[^\"]+" /etc/os-release | \
            awk -F "=" '{print $2}' | tr -d "\""
        )"
        ;;
    *) errx 1 "Unsupported OS!" ;;
esac

# Check for missing dependencies
declare -a deps
# deps+=("todo")
check_deps

# Check for valid params
case "$action" in
    "install") [[ $# -ne 0 ]] || usage 2 ;;
    "remove") [[ $# -ne 0 ]] || usage 2 ;;
    "search") [[ $# -ne 0 ]] || usage 2 ;;
    "update") [[ $# -eq 0 ]] || usage 2 ;;
    "version") [[ $# -eq 0 ]] || usage 2 ;;
esac

# If --version, short-circuit
case "$action" in
    "version") echo "gimme $version ($os)"; exit 0 ;;
esac

# Check for self-update
if [[ $# -eq 1 ]]; then
    case "$1" in
        "gimme")
            # Check for missing dependencies
            deps=("curl")
            check_deps

            repo="https://gitlab.com/mjwhitta/milesrc"
            gimme="/-/raw/master/shell/scripts/gimme"

            curl -kLo /tmp/gimme -s "$repo/$gimme"
            [[ $? -eq 0 ]] || errx 3 "Failed to get new gimme"

            chmod +x "/tmp/gimme"
            mv -f /tmp/gimme "$0"

            exit $?
            ;;
    esac
fi

# Find sudo, if needed
case "$(id -u)" in
    "0") ;;
    *) sudo="$(command -v sudo)" ;;
esac

# Call appropriate package manager
case "$os" in
    "alpine") gimme_apk "$@" ;;
    "arch"|"archarm") gimme_pacman "$@" ;;
    "chrom"*"os") gimme_crew "$@" ;;
    "debian"|"pop"|"raspbian"|"ubuntu") gimme_apt "$@" ;;
    "centos"|"fedora") gimme_dnf "$@" ;;
    "macOS") gimme_brew "$@" ;;
    "opensuse"*"leap") gimme_zypper "leap" "$@" ;;
    "opensuse"*"tumbleweed") gimme_zypper "tw" "$@" ;;
    *) errx 4 "Unsupported package manager!" ;;
esac
