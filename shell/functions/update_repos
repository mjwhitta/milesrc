#!/usr/bin/env bash
# A convenience script for updating all git repos under a directory.
# by Miles Whittaker <mjwhitta@gmail.com>
#
# --------------------------------------------------------------------
# The MIT License (MIT)
#
# Copyright (c) 2018 Miles Whittaker
#
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation files
# (the "Software"), to deal in the Software without restriction,
# including without limitation the rights to use, copy, modify, merge,
# publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
# BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
# --------------------------------------------------------------------

function update_repos() {
    function ur_cleanup() {
        unset args count dir parallel repos stash total ur_cleanup
        unset -f ur_err ur_info ur_usage ur_warn
        rm -f /tmp/ur_update
    }

    function ur_err() { echo -e "\e[31m[!] $@\e[0m"; }

    function ur_info() { echo -e "\e[32m[+] $@\e[0m"; }

    function ur_usage() {
        echo "Usage: update_repos [OPTIONS] <dir>"
        echo
        echo "Update git repos under specified directory"
        echo
        echo "Options:"
        echo "    -h, --help           Display this help message"
        echo "    -p, --parallel       Run using parallel (if"
        echo "                         installed)"
        echo "    -t, --threads=NUM    Use the specified number of"
        echo "                         threads if running in parallel"
        echo "                         (default: $threads)"
        echo
        ur_cleanup
    }

    function ur_warn() { echo -e "\e[33m[-] $@\e[0m"; }

    declare -a args
    unset dir parallel
    threads="32"

    while [[ $# -gt 0 ]]; do
        case "$1" in
            "--") shift && args+=("$@") && break ;;
            "-h"|"--help") ur_usage; return 0 ;;
            "-p"|"--parallel") parallel="true" ;;
            "-t"|"--threads"*)
                case "$1" in
                    "--"*"="*)
                        arg="${1#*=}"
                        [[ -z $arg ]] && ur_usage && return 1
                        ;;
                    *)
                        shift
                        [[ $# -eq 0 ]] && ur_usage && return 1
                        arg="$1"
                        ;;
                esac
                threads="$arg"
                ;;
            *) args+=("$1") ;;
        esac
        shift
    done
    [[ -z ${args[@]} ]] || set -- "${args[@]}"

    [[ $# -ne 1 ]] && ur_usage && return 2
    if [[ -z $(command -v git) ]]; then
        echo "git is not installed"
        return 3
    fi

    if [[ -n $parallel ]] && [[ -z $(command -v parallel) ]]; then
        echo "Parallel is not installed, using default behavior"
        unset parallel
    fi

    cat >/tmp/ur_update <<EOF
#!/usr/bin/env bash
ur_err() { echo -e "\\e[31m[!] \$@\\e[0m"; }
ur_info() { echo -e "\\e[32m[+] \$@\\e[0m"; }
ur_warn() { echo -e "\\e[33m[-] \$@\\e[0m"; }
if [[ -n \$(git -C \$1 config remote.origin.url) ]]; then
    stash="\$(
        git -C \$1 status --porcelain | grep -Es "^[^#?]{2}"
    )"
    if [[ -n \$stash ]]; then
        ur_warn "\$1: stashing changes"
        git -C \$1 stash &>/dev/null
        if [[ \$? -ne 0 ]]; then
            ur_err "\$1: error ocurred while stashing"
            exit
        fi
    fi

    ur_info "\$1: pulling changes"
    git -C \$1 pull -r &>/dev/null
    if [[ \$? -ne 0 ]]; then
        ur_err "\$1: error ocurred while pulling"
        exit
    fi

    if [[ -n \$stash ]]; then
        ur_warn "\$1: restoring changes"
        git -C \$1 stash pop &>/dev/null
        if [[ \$? -ne 0 ]]; then
            ur_err "\$1: error ocurred while unstashing"
            exit
        fi
    fi
else
    ur_warn "\$1: no remote origin"
fi
EOF
    chmod 700 /tmp/ur_update

    declare -a repos
    repos=($(
        find -L $1 -ipath "*archived*" -prune -o -type d \
        -name ".git" -exec dirname {} + 2>/dev/null
    ))
    let "total = ${#repos[@]}"

    if [[ $total -gt 0 ]]; then
        if [[ -n $parallel ]]; then
            ur_info "$total repos to update"
            parallel -P $threads /tmp/ur_update {} ::: ${repos[@]}
        else
            let "count = 1"
            for repo in "${repos[@]}"; do
                echo -en "\e[37m[$count/$total]\e[0m " >&2
                /tmp/ur_update $repo
                let "count += 1"
            done; unset repo
        fi
    fi

    ur_cleanup
}

if [[ -n ${BASH_SOURCE[0]} ]]; then
    case "$0" in
        *"bash") ;;
        *) update_repos "$@" ;;
    esac
fi
