# If not running interactively, don't do anything
[[ $- == *i* ]] || return

# My custom prompt. I've separated this so I can easily customize and
# share it.

# {{{ Functions
# {{{ __milesrc_colors
# Get color escape codes
# $1 = fg
# $2 = bg
function __milesrc_colors() {
    [[ $# -le 2 ]] || return

    local bgcode=""
    local fgcode="\e[0m"

    if [[ $# -ge 1 ]]; then
        local fgclr="$1"
        case "$fgclr" in
            "black") fgcode="\e[30m" ;;
            "red") fgcode="\e[31m" ;;
            "green") fgcode="\e[32m" ;;
            "yellow") fgcode="\e[33m" ;;
            "blue") fgcode="\e[34m" ;;
            "magenta") fgcode="\e[35m" ;;
            "cyan") fgcode="\e[36m" ;;
            "white") fgcode="\e[37m" ;;
            "light_black") fgcode="\e[90m" ;;
            "light_red") fgcode="\e[91m" ;;
            "light_green") fgcode="\e[92m" ;;
            "light_yellow") fgcode="\e[93m" ;;
            "light_blue") fgcode="\e[94m" ;;
            "light_magenta") fgcode="\e[95m" ;;
            "light_cyan") fgcode="\e[96m" ;;
            "light_white") fgcode="\e[97m" ;;
            *) fgcode="\e[38;5;${fgclr}m" ;;
        esac
    fi

    if [[ $# -eq 2 ]]; then
        local bgclr="$2"
        case "$bgclr" in
            "black") bgcode="\e[40m" ;;
            "red") bgcode="\e[41m" ;;
            "green") bgcode="\e[42m" ;;
            "yellow") bgcode="\e[43m" ;;
            "blue") bgcode="\e[44m" ;;
            "magenta") bgcode="\e[45m" ;;
            "cyan") bgcode="\e[46m" ;;
            "white") bgcode="\e[47m" ;;
            "light_black") bgcode="\e[100m" ;;
            "light_red") bgcode="\e[101m" ;;
            "light_green") bgcode="\e[102m" ;;
            "light_yellow") bgcode="\e[103m" ;;
            "light_blue") bgcode="\e[104m" ;;
            "light_magenta") bgcode="\e[105m" ;;
            "light_cyan") bgcode="\e[106m" ;;
            "light_white") bgcode="\e[107m" ;;
            *) bgcode="\e[48;5;${bgclr}m" ;;
        esac
    fi

    case "$MILESRC_SHELL" in
        *"bash") echo -n "\\[$fgcode$bgcode\\]" ;;
        *"zsh") echo -n "%{$fgcode$bgcode%}" ;;
    esac
}
# }}}

# {{{ __milesrc_conditional_rand
# Conditional rand value
# $1 = exit status
# $2 = rand range if exit status is 0
# $3 = rand range otherwise
function __milesrc_conditional_rand() {
    if [[ $# -ne 3 ]]; then
        echo -n "0"
        return
    fi

    local rand="0"
    case "$1" in
        "0") let "rand = RANDOM % $2" ;;
        *) let "rand = RANDOM % $3" ;;
    esac
    echo -n "$rand"
}
# }}}

# {{{ __milesrc_cwd
# Current working directory
# $1 = format in the form of cwd;fgclr;bgclr
# $2 = the width needed to truncate the cwd
function __milesrc_cwd() {
    [[ $# -eq 2 ]] || return

    local cwd="$(
        pwd | sed -r -e "s#$HOME#\~#" -e "s#/# / #g" -e "s/^ //"
    )"
    local fmt="$(echo -n "$1" | \grep -Eo "cwd(;[^;]+){2}")"
    local length="$(echo -n "$cwd" | wc -m)"
    local offset="0"
    local width="$2"
    let "width -= 2" # leading and trailing spaces
    [[ $width -ge 0 ]] || let "width = 0"

    if [[ $length -le $width ]]; then
        let "offset = $width - $length - 1"
        cwd="$(
            echo -n "$cwd"
            for i in $(seq 0 $offset); do echo -n " "; done; unset i
        )"
    else
        let "offset = $length - $width"
        cwd="$(
            echo -n "${cwd:$offset:$width}" | \
            sed -r "s/^.... ?/\.\.\. /"
        )"
    fi

    __milesrc_format "$fmt" "$cwd"
}
# }}}

# {{{ __milesrc_exit_status
# Exit status
# $1 = format in the form of
#   exit;fgclr;bgclr
#   [;[emotes|unsupported];fgclr;bgclr]
# $2 = last exit status
function __milesrc_exit_status() {
    [[ $# -eq 2 ]] || return

    local fmt="$(echo -n "$1" | \grep -Eo "exit(;[^;]+){2}")"
    local status_symbol="$2"
    [[ $status_symbol -ne 130 ]] || status_symbol="0" # Ignore ^C
    local rand="$(__milesrc_conditional_rand $status_symbol 3 6)"

    case "$1" in
        *"emotes"*)
            if [[ status_symbol -eq 0 ]]; then
                fmt="$(echo -n "$1" | \grep -Eo "emotes(;[^;]+){2}")"
            fi
            case "$status_symbol" in
                "0") status_symbol="(^‿^)" ;;
                *) status_symbol="┻━┻ ︵ヽ(°□°)ﾉ︵ ┻━┻ " ;;
            esac
            ;;
        *"unsupported"*)
            if [[ status_symbol -eq 0 ]]; then
                fmt="$(
                    echo -n "$1" | \grep -Eo "unsupported(;[^;]+){2}"
                )"
            fi
            if [[ $status_symbol -eq 0 ]]; then
                case "$rand" in
                    "0") status_symbol="(^‿^)" ;;
                    "1") status_symbol="(ツ)" ;;
                    *) status_symbol="¯\_(ツ)_/¯" ;;
                esac
            else
                case "$rand" in
                    "0") status_symbol="┻━┻ ︵ヽ(°□°)ﾉ︵ ┻━┻ " ;;
                    "1") status_symbol="(╯°□°)╯︵┻━┻ " ;;
                    "2") status_symbol="(ಠ_ಠ)" ;;
                    "3") status_symbol="(ಠ╭╮ಠ)" ;;
                    "4") status_symbol="(ಥ_ಥ)" ;;
                    *) status_symbol="(ง'̀-'́)ง" ;;
                esac
            fi
            ;;
        *) [[ $status_symbol -gt 0 ]] || status_symbol="" ;;
    esac

    __milesrc_format "$fmt" "$status_symbol"
}
# }}}

# {{{ __milesrc_format
# Used to format a string
# $1 = format in the form of ignore;fgclr;bgclr
# $2 = string
function __milesrc_format() {
    [[ $# -eq 2 ]] || return

    local -a conf=($(echo -n "${1//;/ }"))
    local bgclr="${conf[2]}"
    local fgclr="${conf[1]}"
    case "$MILESRC_SHELL" in
        *"zsh") # zsh is dumb and 1-indexed... wtf...
            bgclr="${conf[3]}"
            fgclr="${conf[2]}"
            ;;
    esac

    local len="0"
    [[ -z $2 ]] || len="$(echo -n " $2 " | wc -m)"

    echo -n "$len|"
    echo -n "$(__milesrc_colors $fgclr $bgclr) $2 $(__milesrc_colors)"
}
# }}}

# {{{ __milesrc_git_status
# Git info
# $1 = format in the form of git;fgclr;bgclr
function __milesrc_git_status() {
    [[ $# -eq 1 ]] || return
    [[ -n $(installed git) ]] || return
    [[ -n $(installed perl) ]] || return

    local fmt="$(echo -n "$1" | \grep -Eo "git(;[^;]+){2}")"

    local git_dir="$(git rev-parse --show-toplevel 2>/dev/null)"
    [[ -n $git_dir ]] || return
    [[ -z $(\grep -s "$git_dir" $HOME/.git.nostatus) ]] || return

    local ignore="--ignore-submodules=dirty"
    local git_status="$(git status -b --porcelain $ignore)"

    local branch_name="$(
        echo -n "$git_status" | \
        perl -lne '/^##(.*\s+on)?\s+([^.]+)/ && print $2'
    )"
    [[ -n $branch_name ]] || return
    local git="$branch_name"

    local ahead="$(
        echo -n "$git_status" | \
        perl -lne '/ahead ([0-9]+)/ && print $1'
    )"
    [[ -z $ahead ]] || git="$git ↑$ahead"

    local behind="$(
        echo -n "$git_status" | \
        perl -lne '/behind ([0-9]+)/ && print $1'
    )"
    [[ -z $behind ]] || git="$git ↓$behind"

    local num_diffs="$(
        echo -n "$git_status" | \grep -cEv "^ *(##|\?\?|st)"
    )"
    local untracked="$(
        echo -n "$git_status" | \grep -cE "^ *(\?\?|st)"
    )"
    case "$num_diffs" in
        "0") ;;
        *) git="$git +$num_diffs" ;;
    esac

    [[ $untracked -eq 0 ]] || git="$git ..."
    if [[ $num_diffs -eq 0 ]] &&
       [[ $untracked -eq 0 ]] &&
       [[ -z $ahead$behind ]]
    then
        git="$git ✓"
    fi

    __milesrc_format "$fmt" "$git"
}
# }}}

# {{{ __milesrc_host
# Hostname and related metadata
# $1 = format in the form of
#   host;fgclr;bgclr
#   [;remote;fgclr;bgclr]
#   [;root;fgclr;bgclr]
#   [;hide_local:[true|false]]
function __milesrc_host() {
    [[ $# -eq 1 ]] || return

    local fmt="$(echo -n "$1" | \grep -Eo "host(;[^;]+){2}")"
    local host="$USER@$(uname -n | awk -F "." '{print $1}')"

    local hide_local="$(echo -n "$1" | \grep -Eo "hide_local;[^;]+")"
    case "$hide_local" in
        *"true") host="$USER" ;;
    esac

    if [[ -n $SSH_CLIENT ]]; then
        local remote="$(echo -n "$1" | \grep -Eo "remote(;[^;]+){2}")"
        [[ -z $remote ]] || fmt="$remote"
        host="$USER@$(uname -n | awk -F "." '{print $1}')"
    fi

    local root="$(echo -n "$1" | \grep -Eo "root(;[^;]+){2}")"
    [[ -z $root ]] || [[ -z $(id | \grep "uid=0") ]] || fmt="$root"

    __milesrc_format "$fmt" "$host"
}
# }}}

# {{{ __milesrc_prompt
# Set prompt
function __milesrc_prompt() {
    local exit_status="$?"
    if [[ -n ${MILESRC_PROMPT[@]} ]]; then
        case "$MILESRC_SHELL" in
            *"bash")
                if [[ -z $MILESRC_OLD_PROMPT ]]; then
                    export MILESRC_OLD_PROMPT="$PS1"
                fi
                export PS1="$(__milesrc_prompt_ps1 $exit_status)"
                ;;
            *"zsh")
                if [[ -z $MILESRC_OLD_PROMPT ]]; then
                    export MILESRC_OLD_PROMPT="$PROMPT"
                fi
                export MILESRC_MODE="$VI_INS"
                export PROMPT="$(__milesrc_prompt_ps1 $exit_status)"
                ;;
        esac
    else
        if [[ -n $MILESRC_OLD_PROMPT ]]; then
            case "$MILESRC_SHELL" in
                *"bash") export PS1="$MILESRC_OLD_PROMPT" ;;
                *"zsh") export PROMPT="$MILESRC_OLD_PROMPT" ;;
            esac
            unset MILESRC_OLD_PROMPT
        fi
    fi
}
# }}}

# {{{ __milesrc_prompt_ps1
# Prompt PS1 string
# $1 = last exit status
function __milesrc_prompt_ps1() {
    [[ $# -eq 1 ]] || return

    local -A p
    local exit_status="$1"
    local subtract="true"
    local width="$COLUMNS"
    let "width -= 1"

    for i in "${MILESRC_PROMPT[@]}"; do
        local len="0"
        case "$i" in
            "exit"*)
                p[exit]="$(__milesrc_exit_status $i $exit_status)"
                len="${p[exit]%%|*}"
                ;;
            "git"*)
                p[git]="$(__milesrc_git_status $i)"
                len="${p[git]%%|*}"
                ;;
            "host"*)
                p[host]="$(__milesrc_host $i)"
                len="${p[host]%%|*}"
                ;;
            "newline") unset subtract ;;
            "prompt"*)
                p[prompt]="$(__milesrc_prompt_sym $i)"
                len="${p[prompt]%%|*}"
                ;;
            "venv"*)
                p[venv]="$(__milesrc_python_venv $i)"
                len="${p[venv]%%|*}"
                ;;
            "vi_cmd"*|"vi_ins"*)
                p[mode]="$(__milesrc_vi_mode $i)"
                len="${p[mode]%%|*}"
                ;;
        esac
        [[ -z $subtract ]] || let "width -= ${len:-0}"
    done; unset i

    # CWD
    local fmt="$(
        echo -n "${MILESRC_PROMPT[@]}" | \grep -Eo "cwd[^ ]+"
    )"
    p[cwd]="$(__milesrc_cwd $fmt $width)"

    # Put it together
    for i in "${MILESRC_PROMPT[@]}"; do
        case "$i" in
            "cwd"*)
                len="${p[cwd]%%|*}"
                [[ $len -eq 0 ]] || echo -n "${p[cwd]#*|}"
                ;;
            "exit"*)
                len="${p[exit]%%|*}"
                [[ $len -eq 0 ]] || echo -n "${p[exit]#*|}"
                ;;
            "git"*)
                len="${p[git]%%|*}"
                [[ $len -eq 0 ]] || echo -n "${p[git]#*|}"
                ;;
            "host"*)
                len="${p[host]%%|*}"
                [[ $len -eq 0 ]] || echo -n "${p[host]#*|}"
                ;;
            "newline") echo ;;
            "prompt"*)
                len="${p[prompt]%%|*}"
                [[ $len -eq 0 ]] || echo -n "${p[prompt]#*|}"
                ;;
            "venv"*)
                len="${p[venv]%%|*}"
                [[ $len -eq 0 ]] || echo -n "${p[venv]#*|}"
                ;;
            "vi_cmd"*|"vi_ins"*)
                len="${p[mode]%%|*}"
                [[ $len -eq 0 ]] || echo -n "${p[mode]#*|}"
                ;;
        esac
    done; unset i
    echo -n " "
}
# }}}

# {{{ __milesrc_prompt_sym
# The prompt symbol
# $1 = format in the form of prompt;fgclr;bgclr
function __milesrc_prompt_sym() {
    [[ $# -eq 1 ]] || return

    local fmt="$(echo -n "$1" | \grep -Eo "prompt(;[^;]+){2}")"
    local sym="\$"
    [[ -z $(id | \grep "uid=0") ]] || sym="#"

    __milesrc_format "$fmt" "$sym"
}
# }}}

# {{{ __milesrc_python_venv
# The python virtual environment
# $1 = format in the form of venv;fgclr;bgclr
function __milesrc_python_venv() {
    [[ $# -eq 1 ]] || return

    local fmt="$(echo -n "$1" | \grep -Eo "venv(;[^;]+){2}")"
    local venv="$(echo -n "$VIRTUAL_ENV" | awk -F "/" '{print $NF}')"
    [[ -z $venv ]] || venv="($venv)"

    __milesrc_format "$fmt" "$venv"
}
#}}}

# {{{ __milesrc_vi_mode
# Vi mode for the simulated right prompt
# $1 = format in the form of vi_cmd;fgclr;bgclr;vi_ins;fgclr;bgclr
function __milesrc_vi_mode() {
    [[ $# -eq 1 ]] || return
    case "$MILESRC_SHELL" in
        *"zsh") ;;
        *) return ;;
    esac

    local fmt="$(echo -n "$1" | \grep -Eo "vi_ins(;[^;]+){2}")"
    case "$MILESRC_MODE" in
        $VI_CMD)
            fmt="$(echo -n "$1" | \grep -Eo "vi_cmd(;[^;]+){2}")"
            ;;
    esac

    __milesrc_format "$fmt" "$MILESRC_MODE"
}
# }}}
# }}}

# {{{ Prompt
# Vi mode strings
export VI_CMD="   NORMAL   "
export VI_INS="-- INSERT --"

# Enable prompt
case "$MILESRC_SHELL" in
    *"bash")
        # set vi-cmd-mode-string "    NORMAL    "
        # set vi-ins-mode-string " -- INSERT -- "
        # set show-mode-in-prompt on

        case "$PROMPT_COMMAND" in
            *"__milesrc_prompt;"*) ;;
            *) PROMPT_COMMAND="__milesrc_prompt; $PROMPT_COMMAND" ;;
        esac
        ;;
    *"zsh")
        function zle-keymap-select() {
            local exit_status="$?"
            if [[ -n ${MILESRC_PROMPT[@]} ]]; then
                case "$KEYMAP" in
                    "main"|"viins") export MILESRC_MODE="$VI_INS" ;;
                    "vicmd") export MILESRC_MODE="$VI_CMD" ;;
                esac
                local fmt="$(
                    echo -n "${MILESRC_PROMPT[@]}" | \
                    \grep -Eo "(vi_cmd|vi_ins)[^ ]+"
                )"
                if [[ -n $fmt ]]; then
                    local mode="$(__milesrc_vi_mode $fmt)"
                    mode="${mode#*|}"
                    local new_prompt="$(
                        echo -n "$PROMPT" | \
                        sed -r "s/ ($VI_CMD|$VI_INS) /$mode/"
                    )"
                    export PROMPT="$new_prompt"
                fi
            fi
            zle reset-prompt
        }
        zle -N zle-keymap-select

        #function zle-line-finish() {
        #    local exit_status="$?"
        #    if [[ -n ${MILESRC_PROMPT[@]} ]]; then
        #        export MILESRC_MODE="$VI_INS"
        #        export PROMPT="$(__milesrc_prompt_ps1 $exit_status)"
        #    fi
        #}
        #zle -N zle-line-finish

        case "${precmd_functions[(r)__milesrc_prompt]}" in
            "__milesrc_prompt") ;;
            *) precmd_functions+=(__milesrc_prompt) ;;
        esac
        ;;
esac
# }}}
