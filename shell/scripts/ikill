#!/usr/bin/env bash
# A script for interactively killing processes.
# by Miles Whittaker <mjwhitta@gmail.com>
#
# --------------------------------------------------------------------
# The MIT License (MIT)
#
# Copyright (c) 2018 Miles Whittaker
#
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation files
# (the "Software"), to deal in the Software without restriction,
# including without limitation the rights to use, copy, modify, merge,
# publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
# BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
# --------------------------------------------------------------------

### Helpers begin
check_deps() {
    local missing
    for d in "${deps[@]}"; do
        if [[ -z $(command -v "$d") ]]; then
            # Force absolute path
            if [[ ! -e "/$d" ]]; then
                err "$d was not found"
                missing="true"
            fi
        fi
    done; unset d
    [[ -z $missing ]] || exit 128
}
err() { echo -e "${color:+\e[31m}[!] $*${color:+\e[0m}" >&2; }
errx() { err "${*:2}"; exit "$1"; }
good() { echo -e "${color:+\e[32m}[+] $*${color:+\e[0m}"; }
info() { echo -e "${color:+\e[37m}[*] $*${color:+\e[0m}"; }
long_opt() {
    local arg shift="0"
    case "$1" in
        "--"*"="*) arg="${1#*=}"; [[ -n $arg ]] || return 127 ;;
        *) shift="1"; shift; [[ $# -gt 0 ]] || return 127; arg="$1" ;;
    esac
    echo "$arg"
    return $shift
}
subinfo() { echo -e "${color:+\e[36m}[=] $*${color:+\e[0m}"; }
warn() { echo -e "${color:+\e[33m}[-] $*${color:+\e[0m}"; }
### Helpers end

stop_pid() { kill -9 "$1" 2>/dev/null; }

usage() {
    cat <<EOF
Usage: ${0##*/} [OPTIONS] <pattern>

DESCRIPTION
    Interactively kill processes.

OPTIONS
    -h, --help         Display this help message
        --no-color     Disable colorized output
    -u, --user=USER    Only list processes for specified user

EOF
    exit "$1"
}

declare -a args
unset help
color="true"
uname="$(id -nu)"

# Parse command line options
while [[ $# -gt 0 ]]; do
    case "$1" in
        "--") shift; args+=("$@"); break ;;
        "-h"|"--help") help="true" ;;
        "--no-color") unset color ;;
        "-u"|"--user"*) uname="$(long_opt "$@")" ;;
        *) args+=("$1") ;;
    esac
    case "$?" in
        0) ;;
        1) shift ;;
        *) usage $? ;;
    esac
    shift
done
[[ ${#args[@]} -eq 0 ]] || set -- "${args[@]}"

# Help info
[[ -z $help ]] || usage 0

# Check for missing dependencies
declare -a deps
deps+=("pgrep")
check_deps

# Check for valid params
[[ $# -eq 1 ]] || usage 1

# Get list of processes matching pattern
declare -a processes
while read -r line; do
    case "$line" in
        *"$0"*) continue ;;
    esac
    processes+=("$line")
done < <(pgrep -af${uname:+u $uname} "$1"); unset line

[[ ${#processes[@]} -gt 0 ]] || exit 0

# List all processes matching pattern
for process in "${processes[@]}"; do
    echo "${process# }"
done; unset process
echo

# Ask about killing each process
ask_all="true"
for process in "${processes[@]}"; do
    pid="$(echo "$process" | grep -ioPs "^ *\K\d+")"

    if [[ -n $ask_all ]]; then
        while :; do
            # Prompt whether to kill or not
            read -n 1 -p "Kill $pid? [y/n/a/q/l]: " -rs answer
            echo

            case "$answer" in
                "a") stop_pid "$pid"; unset ask_all; break ;;
                "l") stop_pid "$pid"; exit 0 ;;
                "n") break ;;
                "q") exit 0 ;;
                "y") stop_pid "$pid"; break ;;
                *) echo "Invalid response, try again!" ;;
            esac
        done
    else
        stop_pid "$pid"
    fi
done; unset process
