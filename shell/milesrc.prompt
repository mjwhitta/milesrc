# If not running interactively, don't do anything
[[ $- == *i* ]] || return

# My custom prompt. I've separated this so I can easily customize and
# share it.

# {{{ Helper utils
export MILESRC_PROMPT_SHELL="$(command -v zsh)"
[[ -z $BASH ]] || export MILESRC_PROMPT_SHELL="$BASH"
case "$MILESRC_PROMPT_SHELL" in
    *"zsh")
        export MILESRC_PROMPT_ZSHV="$(
            zsh --version | grep -m 1 -oPs "zsh \K[0-9]+\.[0-9]+"
        )"
        ;;
esac
# }}}

# {{{ Functions
# {{{ __milesrc_colors
# Get color escape codes
# $1 = fg
# $2 = bg
function __milesrc_colors() {
    [[ $# -le 2 ]] || return

    local bgcode=""
    local fgcode="\e[0m"

    if [[ $# -ge 1 ]]; then
        local fgclr="$1"
        case "$fgclr" in
            "black") fgcode="\e[30m" ;;
            "red") fgcode="\e[31m" ;;
            "green") fgcode="\e[32m" ;;
            "yellow") fgcode="\e[33m" ;;
            "blue") fgcode="\e[34m" ;;
            "magenta") fgcode="\e[35m" ;;
            "cyan") fgcode="\e[36m" ;;
            "white") fgcode="\e[37m" ;;
            "light_black") fgcode="\e[90m" ;;
            "light_red") fgcode="\e[91m" ;;
            "light_green") fgcode="\e[92m" ;;
            "light_yellow") fgcode="\e[93m" ;;
            "light_blue") fgcode="\e[94m" ;;
            "light_magenta") fgcode="\e[95m" ;;
            "light_cyan") fgcode="\e[96m" ;;
            "light_white") fgcode="\e[97m" ;;
            *) fgcode="\e[38;5;${fgclr}m" ;;
        esac
    fi

    if [[ $# -eq 2 ]]; then
        local bgclr="$2"
        case "$bgclr" in
            "black") bgcode="\e[40m" ;;
            "red") bgcode="\e[41m" ;;
            "green") bgcode="\e[42m" ;;
            "yellow") bgcode="\e[43m" ;;
            "blue") bgcode="\e[44m" ;;
            "magenta") bgcode="\e[45m" ;;
            "cyan") bgcode="\e[46m" ;;
            "white") bgcode="\e[47m" ;;
            "light_black") bgcode="\e[100m" ;;
            "light_red") bgcode="\e[101m" ;;
            "light_green") bgcode="\e[102m" ;;
            "light_yellow") bgcode="\e[103m" ;;
            "light_blue") bgcode="\e[104m" ;;
            "light_magenta") bgcode="\e[105m" ;;
            "light_cyan") bgcode="\e[106m" ;;
            "light_white") bgcode="\e[107m" ;;
            *) bgcode="\e[48;5;${bgclr}m" ;;
        esac
    fi

    case "$MILESRC_PROMPT_SHELL" in
        *"bash") echo -n "\\[$fgcode$bgcode\\]" ;;
        *"zsh") echo -n "%{$fgcode$bgcode%}" ;;
    esac
}
# }}}

# {{{ __milesrc_cwd
# Current working directory
# $1 = format in the form of cwd;fgclr;bgclr[;fill]
# $2 = the width needed to truncate the cwd
function __milesrc_cwd() {
    [[ $# -eq 2 ]] || return

    local cwd="$(
        pwd | sed -r -e "s#^$HOME#\~#" -e "s#/# / #g" -e "s/^ //"
    )"
    local fill="$(echo -n "$1" | grep -Eios ";fill")"
    local fmt="$(echo -n "$1" | grep -Eios "cwd(;[^;]+){2}")"
    local i
    local length="$(echo -n "$cwd" | wc -m)"
    local offset="0"
    local width="$2"
    ((width -= 2)) # leading and trailing spaces
    [[ $width -ge 0 ]] || width="0"

    if [[ $length -le $width ]]; then
        ((offset = width - length - 1))
        [[ -n $fill ]] || offset="0"
        cwd="$(
            echo -n "$cwd"
            for i in $(seq 0 $offset); do echo -n " "; done; unset i
        )"
    else
        ((offset = length - width))
        cwd="$(
            echo -n "${cwd:$offset:$width} " | \
            sed -r "s/^.... ?/\.\.\. /"
        )"
    fi

    __milesrc_format "$fmt" "${cwd:0:$width}"
}
# }}}

# {{{ __milesrc_date
# Timestamp
# $1 = format in the form of date;fgclr;bgclr
function __milesrc_date() {
    [[ $# -eq 1 ]] || return

    local fmt="$(echo -n "$1" | grep -Eios "date(;[^;]+){2}")"
    local date="$(date +%FT%H:%M:%S%z)"

    __milesrc_format "$fmt" "$date"
}
#}}}

# {{{ __milesrc_exit_status
# Exit status
# $1 = format in the form of
#   exit;fgclr;bgclr
#   [;[emotes|unsupported];fgclr;bgclr]
# $2 = last exit status
function __milesrc_exit_status() {
    [[ $# -eq 2 ]] || return

    local fmt="$(echo -n "$1" | grep -Eios "exit(;[^;]+){2}")"
    local status_symbol="$2"
    [[ $status_symbol -ne 130 ]] || status_symbol="0" # Ignore ^C

    case "$1" in
        *"emotes"*)
            if [[ status_symbol -eq 0 ]]; then
                fmt="$(echo -n "$1" | grep -Eios "emotes(;[^;]+){2}")"
                case "$(__milesrc_rand_status 3)" in
                    "0")   status_symbol="=)" ;;
                    "1") status_symbol="(^.^)" ;;
                    *) status_symbol="¯\_(^.^)_/¯" ;;
                esac
            else
                case "$(__milesrc_rand_status 9)" in
                    "0") status_symbol="=(" ;;
                    "1") status_symbol="(-_-)" ;;
                    "2") status_symbol="¯\_(-_-)_/¯" ;;
                    "3") status_symbol="\(⊙_⊙)/" ;;
                    "4") status_symbol="(o‵-′)o" ;;
                    "5") status_symbol="(‵-′)b" ;;
                    "6") status_symbol="(>_<)" ;;
                    "7") status_symbol="(°⌂°)" ;;
                    *) status_symbol="(;⌒;)" ;;
                esac
            fi
            ;;
        *"unsupported"*)
            if [[ status_symbol -eq 0 ]]; then
                fmt="$(
                    echo -n "$1" | grep -Eios "unsupported(;[^;]+){2}"
                )"
                case "$(__milesrc_rand_status 6)" in
                    "0")   status_symbol="=)" ;;
                    "1") status_symbol="(^ت^)" ;;
                    "2") status_symbol="¯\_(^ت^)_/¯" ;;
                    "3") status_symbol="(ツ)" ;;
                    "4") status_symbol="¯\_(ツ)_/¯" ;;
                    *) status_symbol="(^‿^)" ;;
                esac
            else
                case "$(__milesrc_rand_status 15)" in
                    "0") status_symbol="=(" ;;
                    "1") status_symbol="(-_-)" ;;
                    "2") status_symbol="¯\_(-_-)_/¯" ;;
                    "3") status_symbol="\(⊙_⊙)/" ;;
                    "4") status_symbol="(o‵′)o" ;;
                    "5") status_symbol="(‵-′)b" ;;
                    "6") status_symbol="(>_<)" ;;
                    "7") status_symbol="(°⌂°)" ;;
                    "8") status_symbol="(;⌒;)" ;;
                    "9") status_symbol="(╯°⌂°)╯︵┻━┻ " ;;
                    "10") status_symbol="┻━┻ ︵ヽ(°⌂°)ﾉ︵ ┻━┻ " ;;
                    "11") status_symbol="(ಠ_ಠ)" ;;
                    "12") status_symbol="(ಠ╭╮ಠ)" ;;
                    "13") status_symbol="(ಥ_ಥ)" ;;
                    *) status_symbol="(ง‵-′)ง" ;;
                esac
            fi
            ;;
        *) [[ $status_symbol -gt 0 ]] || status_symbol="" ;;
    esac

    __milesrc_format "$fmt" "$status_symbol"
}
# }}}

# {{{ __milesrc_format
# Used to format a string
# $1 = format in the form of ignore;fgclr;bgclr
# $2 = string
function __milesrc_format() {
    [[ $# -eq 2 ]] || return

    local -a conf=($(echo -n "${1//;/ }"))
    local bgclr="${conf[2]}"
    local fgclr="${conf[1]}"
    case "$MILESRC_PROMPT_SHELL" in
        *"zsh") # zsh is dumb and 1-indexed... wtf...
            bgclr="${conf[3]}"
            fgclr="${conf[2]}"
            ;;
    esac

    local len="0"
    [[ -z $2 ]] || len="$(echo -n " $2 " | wc -m)"

    echo -n "$len|"
    echo -n "$(__milesrc_colors $fgclr $bgclr) $2 $(__milesrc_colors)"
}
# }}}

# {{{ __milesrc_git_status
# Git info
# $1 = format in the form of git;fgclr;bgclr
function __milesrc_git_status() {
    [[ $# -eq 1 ]] || return
    [[ -n $(command -v git) ]] || return

    local fmt="$(echo -n "$1" | grep -Eios "git(;[^;]+){2}")"

    local git_dir="$(git rev-parse --show-toplevel 2>/dev/null)"
    [[ -n $git_dir ]] || return
    [[ -z $(grep -s "$git_dir" $HOME/.git.nostatus) ]] || return

    local ignore="--ignore-submodules=dirty"
    local git_status="$(git status -b --porcelain $ignore)"

    local branch_name="$(
        echo -n "$git_status" | grep -oP "^##(.*\s+on)?\s+\K[^.]+"
    )"
    [[ -n $branch_name ]] || return
    local git="$branch_name"

    local ahead="$(echo -n "$git_status" | grep -oP "ahead \K[0-9]+")"
    [[ -z $ahead ]] || git="$git ↑$ahead"

    local behind="$(
        echo -n "$git_status" | grep -oP "behind \K[0-9]+"
    )"
    [[ -z $behind ]] || git="$git ↓$behind"

    local num_diffs="$(
        echo -n "$git_status" | grep -cEsv "^ *(##|\?\?|st)"
    )"
    local untracked="$(
        echo -n "$git_status" | grep -cEs "^ *(\?\?|st)"
    )"
    case "$num_diffs" in
        "0") ;;
        *) git="$git +$num_diffs" ;;
    esac

    [[ $untracked -eq 0 ]] || git="$git ..."
    if [[ $num_diffs -eq 0 ]] &&
       [[ $untracked -eq 0 ]] &&
       [[ -z $ahead$behind ]]
    then
        git="$git ✓"
    fi

    __milesrc_format "$fmt" "$git"
}
# }}}

# {{{ __milesrc_host
# Hostname and related metadata
# $1 = format in the form of
#   host;fgclr;bgclr
#   [;remote;fgclr;bgclr]
#   [;root;fgclr;bgclr]
#   [;hide_local:[true|false]]
function __milesrc_host() {
    [[ $# -eq 1 ]] || return

    local fmt="$(echo -n "$1" | grep -Eios "host(;[^;]+){2}")"
    local hide_local="$(echo -n "$1" | grep -Eios "hide_local;[^;]+")"
    [[ -z $SSH_CONNECTION ]] || unset hide_local

    local remote="$(echo -n "$1" | grep -Eios "remote(;[^;]+){2}")"
    [[ -z $SSH_CONNECTION ]] || [[ -z $remote ]] || fmt="$remote"

    local root="$(echo -n "$1" | grep -Eios "root(;[^;]+){2}")"
    [[ -z $(id | grep -s "uid=0") ]] || [[ -z $root ]] || fmt="$root"

    local host="$USER@$(hostname -s)"
    case "$hide_local" in
        "hide_local;true") host="$USER" ;;
    esac

    __milesrc_format "$fmt" "$host"
}
# }}}

# {{{ __milesrc_prompt
# Set prompt
function __milesrc_prompt() {
    local exit_status="$?"
    if [[ ${#MILESRC_PROMPT[@]} -gt 0 ]]; then
        case "$MILESRC_PROMPT_SHELL" in
            *"zsh") export MILESRC_PROMPT_MODE="$VI_INS" ;;
        esac
        [[ -n $MILESRC_OLD_PS1 ]] || export MILESRC_OLD_PS1="$PS1"
        export PS1="$(__milesrc_prompt_ps1 $exit_status)"
    else
        if [[ -n $MILESRC_OLD_PS1 ]]; then
            export PS1="$MILESRC_OLD_PS1"
            unset MILESRC_OLD_PS1
        fi
    fi
}
# }}}

# {{{ __milesrc_prompt_ps1
# Prompt PS1 string
# $1 = last exit status
function __milesrc_prompt_ps1() {
    [[ $# -eq 1 ]] || return

    local -A p
    local cwdwidth="$COLUMNS"
    local exit_status="$1"
    local found
    local i
    local subtract="0"
    case "$MILESRC_PROMPT_SHELL" in
        *"zsh")
            [[ $MILESRC_PROMPT_ZSHV -ge 5.5 ]] || ((cwdwidth -= 1))
            ;;
    esac

    for i in "${MILESRC_PROMPT[@]}"; do
        local len="0"
        case "$i" in
            "cwd"*) found="true" ;;
            "date"*)
                p[date]="$(__milesrc_date $i)"
                len="${p[date]%%|*}"
                ;;
            "exit"*)
                p[exit]="$(__milesrc_exit_status $i $exit_status)"
                len="${p[exit]%%|*}"
                ;;
            "git"*)
                p[git]="$(__milesrc_git_status $i)"
                len="${p[git]%%|*}"
                ;;
            "host"*)
                p[host]="$(__milesrc_host $i)"
                len="${p[host]%%|*}"
                ;;
            "newline")
                if [[ -n $found ]]; then
                    cwdwidth="$((COLUMNS - subtract))"
                    unset found
                fi
                subtract="0"
                ;;
            "prompt"*)
                p[prompt]="$(__milesrc_prompt_sym $i)"
                len="${p[prompt]%%|*}"
                ;;
            "venv"*)
                p[venv]="$(__milesrc_python_venv $i)"
                len="${p[venv]%%|*}"
                ;;
            "vi_cmd"*|"vi_ins"*)
                p[mode]="$(__milesrc_vi_mode $i)"
                len="${p[mode]%%|*}"
                ;;
        esac
        ((subtract += ${len:-0}))
    done; unset i

    # CWD
    local fmt="$(
        echo -n "${MILESRC_PROMPT[@]}" | grep -Eios "cwd[^ ]+"
    )"
    p[cwd]="$(__milesrc_cwd $fmt $cwdwidth)"

    # Put it together
    for i in "${MILESRC_PROMPT[@]}"; do
        case "$i" in
            "date"*)
                len="${p[date]%%|*}"
                [[ $len -eq 0 ]] || echo -n "${p[date]#*|}"
                ;;
            "cwd"*)
                len="${p[cwd]%%|*}"
                [[ $len -eq 0 ]] || echo -n "${p[cwd]#*|}"
                ;;
            "exit"*)
                len="${p[exit]%%|*}"
                [[ $len -eq 0 ]] || echo -n "${p[exit]#*|}"
                ;;
            "git"*)
                len="${p[git]%%|*}"
                [[ $len -eq 0 ]] || echo -n "${p[git]#*|}"
                ;;
            "host"*)
                len="${p[host]%%|*}"
                [[ $len -eq 0 ]] || echo -n "${p[host]#*|}"
                ;;
            "newline") echo ;;
            "prompt"*)
                len="${p[prompt]%%|*}"
                [[ $len -eq 0 ]] || echo -n "${p[prompt]#*|}"
                ;;
            "venv"*)
                len="${p[venv]%%|*}"
                [[ $len -eq 0 ]] || echo -n "${p[venv]#*|}"
                ;;
            "vi_cmd"*|"vi_ins"*)
                len="${p[mode]%%|*}"
                [[ $len -eq 0 ]] || echo -n "${p[mode]#*|}"
                ;;
        esac
    done; unset i
}
# }}}

# {{{ __milesrc_prompt_sym
# The prompt symbol
# $1 = format in the form of prompt;fgclr;bgclr
function __milesrc_prompt_sym() {
    [[ $# -eq 1 ]] || return

    local fmt="$(echo -n "$1" | grep -Eios "prompt(;[^;]+){2}")"
    local sym="\$"
    [[ -z $(id | grep -s "uid=0") ]] || sym="#"

    __milesrc_format "$fmt" "$sym"
}
# }}}

# {{{ __milesrc_python_venv
# The python virtual environment
# $1 = format in the form of venv;fgclr;bgclr
function __milesrc_python_venv() {
    [[ $# -eq 1 ]] || return

    local fmt="$(echo -n "$1" | grep -Eios "venv(;[^;]+){2}")"
    local venv="$(echo -n "$VIRTUAL_ENV" | awk -F "/" '{print $NF}')"
    [[ -z $venv ]] || venv="($venv)"

    __milesrc_format "$fmt" "$venv"
}
#}}}

# {{{ __milesrc_rand_status
# Return rand value
# $1 = rand range
function __milesrc_rand_status() {
    local rand="0"
    if [[ -n $(command -v xxd) ]]; then
        RANDOM="$(
            xxd -p /dev/urandom | grep -Eos "[1-9][0-9]{0,15}" | \
            head -n 1
        )"
    fi
    [[ $# -ne 1 ]] || ((rand = RANDOM % $1))
    echo -n "$rand"
}
# }}}

# {{{ __milesrc_vi_mode
# Vi mode for the simulated right prompt
# $1 = format in the form of
#      vi_cmd;fgclr;bgclr;vi_ins;fgclr;bgclr;vi_rep;fgclr;bgclr
function __milesrc_vi_mode() {
    [[ $# -eq 1 ]] || return
    case "$MILESRC_PROMPT_SHELL" in
        *"zsh") ;;
        *) return ;;
    esac

    local fmt="$(echo -n "$1" | grep -Eios "vi_ins(;[^;]+){2}")"
    case "$MILESRC_PROMPT_MODE" in
        $VI_CMD)
            fmt="$(echo -n "$1" | grep -Eios "vi_cmd(;[^;]+){2}")"
            ;;
        $VI_REP)
            fmt="$(echo -n "$1" | grep -Eios "vi_rep(;[^;]+){2}")"
            ;;
    esac

    __milesrc_format "$fmt" "$MILESRC_PROMPT_MODE"
}
# }}}
# }}}

# {{{ Prompt
# Vi mode strings
export VI_CMD=" NORMAL  "
export VI_INS=" INSERT  "
export VI_REP=" REPLACE "

# Enable prompt
case "$MILESRC_PROMPT_SHELL" in
    *"bash")
        # set vi-cmd-mode-string $VI_CMD
        # set vi-ins-mode-string $VI_INS
        # set show-mode-in-prompt on

        case "$PROMPT_COMMAND" in
            *"__milesrc_prompt;"*) ;;
            *) PROMPT_COMMAND="__milesrc_prompt; $PROMPT_COMMAND" ;;
        esac
        ;;
    *"zsh")
        function zle-keymap-select() {
            local exit_status="$?"
            if [[ ${#MILESRC_PROMPT[@]} -gt 0 ]]; then
                case "$KEYMAP" in
                    "main")
                        case "$ZLE_STATE" in
                            *"insert"*)
                                export MILESRC_PROMPT_MODE="$VI_INS"
                                ;;
                            *) export MILESRC_PROMPT_MODE="$VI_REP" ;;
                        esac
                        ;;
                    *) export MILESRC_PROMPT_MODE="$VI_CMD" ;;
                esac
                local fmt="$(
                    echo -n "${MILESRC_PROMPT[@]}" | \
                    grep -Eios "(vi_cmd|vi_ins|vi_rep)[^ ]+"
                )"
                if [[ -n $fmt ]]; then
                    local mode="$(__milesrc_vi_mode $fmt)"
                    mode="${mode#*|}"
                    local new_prompt="$(
                        echo -n "$PS1" | \
                        sed -r "s/ ($VI_CMD|$VI_INS|$VI_REP) /$mode/"
                    )"
                    export PS1="$new_prompt"
                fi
            fi
            zle reset-prompt
        }
        zle -N zle-keymap-select

        case "${precmd_functions[(r)__milesrc_prompt]}" in
            "__milesrc_prompt") ;;
            *) precmd_functions+=(__milesrc_prompt) ;;
        esac
        ;;
esac
# }}}
