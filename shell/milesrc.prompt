# If not running interactively, don't do anything
[[ $- == *i* ]] || return

# My custom prompt. I've separated this so I can easily customize and
# share it.

# {{{ Prompt
case "$MILESRC_SHELL" in
    *"bash")
        # Set colors
        blue="\\[\e[37m\e[44m\\]"
        green="\\[\e[37m\e[42m\\]"
        light_black="\\[\e[37m\e[100m\\]"
        reset="\\[\e[0m\\]"
        red="\\[\e[37m\e[41m\\]"
        white="\\[\e[90m\e[47m\\]"

        # Right prompt stuff
        export VI_CMD="$(echo -n "$blue    NORMAL    $reset")"
        export VI_INS="$(echo -n "$green -- INSERT -- $reset")"
        # set vi-cmd-mode-string "    NORMAL    "
        # set vi-ins-mode-string " -- INSERT -- "
        # set show-mode-in-prompt on
        ;;
    *"zsh")
        # Set colors
        blue="%{\e[37m\e[44m%}"
        green="%{\e[37m\e[42m%}"
        light_black="%{\e[37m\e[100m%}"
        reset="%{\e[0m%}"
        red="%{\e[37m\e[41m%}"
        white="%{\e[90m\e[47m%}"

        # Right prompt stuff
        export VI_CMD="$(echo -n "$blue    NORMAL    $reset")"
        export VI_INS="$(echo -n "$green -- INSERT -- $reset")"

        function zle-keymap-select() {
            local last_status="$?"
            if [[ -n $MILESRC_THEME_PROMPT ]]; then
                case "$KEYMAP" in
                    "main"|"viins") MILESRC_MODE="$VI_INS" ;;
                    "vicmd") MILESRC_MODE="$VI_CMD" ;;
                esac
                export PROMPT="$(__milesrc_prompt_ps1 $last_status)"
            fi
            zle reset-prompt
        }
        zle -N zle-keymap-select

        function zle-line-finish() {
            local last_status="$?"
            if [[ -n $MILESRC_THEME_PROMPT ]]; then
                export MILESRC_MODE="$VI_INS"
                export PROMPT="$(__milesrc_prompt_ps1 $last_status)"
            fi
        }
        zle -N zle-line-finish
        ;;
esac

# Current working directory
function __milesrc_cwd() {
    local cwd="$(
        pwd | sed -r -e "s#$HOME#\~#" -e "s#/# / #g" -e "s/^ //"
    )"
    local length="$(echo -n "$cwd" | wc -m)"
    local offset
    local width="$1"

    if [[ $length -le $width ]]; then
        let "offset = $width - $length - 1"
        echo -n "$cwd"
        local i; for i in $(seq 0 $offset); do echo -n " "; done
    else
        let "offset = $length - $width"
        echo -n "${cwd:$offset:$width}" | sed -r "s/^.... ?/\.\.\. /"
    fi
}

# Exit status
function __milesrc_exit_status() {
    [[ $# -eq 1 ]] || return

    local status_symbol="$1"
    local rand="$(__milesrc_rand $1 3 6)"

    case "$MILESRC_PROMPT_EMOTICONS" in
        "") [[ $status_symbol -gt 0 ]] || status_symbol="" ;;
        "unsupported")
            if [[ $status_symbol -eq 0 ]]; then
                case "$rand" in
                    "0") status_symbol="(^‿^)" ;;
                    "1") status_symbol="(ツ)" ;;
                    *) status_symbol="¯\_(ツ)_/¯" ;;
                esac
            else
                case "$rand" in
                    "0") status_symbol="┻━┻ ︵ヽ(°□°)ﾉ︵ ┻━┻ " ;;
                    "1") status_symbol="(╯°□°)╯︵┻━┻ " ;;
                    "2") status_symbol="(ಠ_ಠ)" ;;
                    "3") status_symbol="(ಠ╭╮ಠ)" ;;
                    "4") status_symbol="(ಥ_ಥ)" ;;
                    *) status_symbol="(ง'̀-'́)ง" ;;
                esac
            fi
            ;;
        *)
            case "$status_symbol" in
                "0") status_symbol="(^‿^)" ;;
                *) status_symbol="┻━┻ ︵ヽ(°□°)ﾉ︵ ┻━┻ " ;;
            esac
            ;;
    esac

    echo -n "$status_symbol"
}

# Git info
function __milesrc_git_status() {
    [[ -n $(installed git) ]] || return
    [[ -n $(installed perl) ]] || return

    local git_dir="$(git rev-parse --show-toplevel 2>/dev/null)"
    [[ -n $git_dir ]] || return
    [[ -z $(\grep -s "$git_dir" $HOME/.git.nostatus) ]] || return

    local ignore="--ignore-submodules=dirty"
    local git_status="$(git status -b --porcelain $ignore)"

    local branch_name="$(
        echo "$git_status" | \
        perl -lne '/^##(.*\s+on)?\s+([^.]+)/ && print $2'
    )"
    [[ -n $branch_name ]] || return
    local git="$branch_name"

    local ahead="$(
        echo "$git_status" | \
        perl -lne '/ahead ([0-9]+)/ && print $1'
    )"
    [[ -z $ahead ]] || git="$git ↑$ahead"

    local behind="$(
        echo "$git_status" | \
        perl -lne '/behind ([0-9]+)/ && print $1'
    )"
    [[ -z $behind ]] || git="$git ↓$behind"

    local num_diffs="$(
        echo "$git_status" | \grep -cEv "^ *(##|\?\?|st)"
    )"
    local untracked="$(echo "$git_status" | \grep -cE "^ *(\?\?|st)")"
    case "$num_diffs" in
        "0") ;;
        *) git="$git +$num_diffs" ;;
    esac

    [[ $untracked -eq 0 ]] || git="$git ..."
    if [[ $num_diffs -eq 0 ]] &&
       [[ $untracked -eq 0 ]] &&
       [[ -z $ahead$behind ]]
    then
        git="$git ✓"
    fi

    echo -n "$git"
}

# Prompt PS1 string
function __milesrc_prompt_ps1() {
    [[ $# -eq 1 ]] || return

    local last_status="$1"

    # Exit status
    local exit="$(__milesrc_exit_status $last_status)"

    # Host
    local host="$USER@$(uname -n | awk -F "." '{print $1}')"

    # Git
    local git="$(__milesrc_git_status)"

    # CWD
    local width="$COLUMNS"
    [[ -z $exit ]] || let "width -= $(echo -n " $exit " | wc -m)"
    [[ -z $host ]] || let "width -= $(echo -n " $host " | wc -m)"
    [[ -z $git ]] || let "width -= $(echo -n " $git " | wc -m)"
    case "$MILESRC_SHELL" in
        *"bash") let "width -= 3" ;;
        *"zsh") let "width -= 17" ;;
    esac
    [[ $width -ge 0 ]] || let "width = 0"
    local cwd="$(__milesrc_cwd $width)"

    # Prompt symbol
    local prompt="\$"
    [[ -z $(id | \grep "uid=0") ]] || prompt="#"

    # Put it all together
    case "$last_status" in
        "0") [[ -z $exit ]] || echo -n "$green $exit $reset" ;;
        *) echo -n "$red $exit $reset" ;;
    esac
    echo -n "$blue $host $reset"
    [[ -z $git ]] || echo -n "$white $git $reset"
    echo -n "$light_black $cwd $reset"
    case "$MILESRC_SHELL" in
        *"bash") echo ;;
        *"zsh") echo "$MILESRC_MODE" ;;
    esac
    echo -n "$light_black$prompt $reset "
}

# Set prompt
function __milesrc_prompt() {
    local last_status="$?"
    if [[ -n $MILESRC_THEME_PROMPT ]]; then
        case "$MILESRC_SHELL" in
            *"bash")
                if [[ -z $MILESRC_OLD_PROMPT ]]; then
                    export MILESRC_OLD_PROMPT="$PS1"
                fi
                export PS1="$(__milesrc_prompt_ps1 $last_status)"
                ;;
            *"zsh")
                if [[ -z $MILESRC_OLD_PROMPT ]]; then
                    export MILESRC_OLD_PROMPT="$PROMPT"
                fi
                export MILESRC_MODE="$VI_INS"
                export PROMPT="$(__milesrc_prompt_ps1 $last_status)"
                ;;
        esac
    else
        case "$MILESRC_SHELL" in
            *"bash")
                if [[ -n $MILESRC_OLD_PROMPT ]]; then
                    export PS1="$MILESRC_OLD_PROMPT"
                    unset MILESRC_OLD_PROMPT
                fi
                ;;
            *"zsh")
                if [[ -n $MILESRC_OLD_PROMPT ]]; then
                    export PROMPT="$MILESRC_OLD_PROMPT"
                    unset MILESRC_OLD_PROMPT
                fi
                ;;
        esac
    fi
}

function __milesrc_rand() {
    [[ $# -eq 3 ]] || echo -n "0"

    local rand
    case "$1" in
        "0") let "rand = RANDOM % $2" ;;
        *) let "rand = RANDOM % $3" ;;
    esac
    echo -n "$rand"
}

case "$MILESRC_SHELL" in
    *"bash")
        if [[ $PROMPT_COMMAND != *__milesrc_prompt* ]]; then
            PROMPT_COMMAND="__milesrc_prompt;"$'\n'"$PROMPT_COMMAND"
        fi
        ;;
    *"zsh")
        if [[ ${precmd_functions[(r)__milesrc_prompt]} != __milesrc_prompt ]]; then
            precmd_functions+=(__milesrc_prompt)
        fi
        ;;
esac
# }}}
