#!/usr/bin/env bash

link() {
    echo "[+] Linking directories and files..."
    for entry in "${files[@]}"; do
        from="$here/${entry/:*/}"
        to="$(eval echo "${entry/*:/}")"

        if [[ ! -e $from ]]; then
            echo "[-] $from does not exist"
            continue
        fi

        if [[ -L $to ]]; then
            already_from="$(\ls -hl $to | awk '{print $NF}')"
            [[ $already_from != $from ]] || continue
            echo "[+] Removing symlink $to"
            rm $to
        elif [[ -e $to ]] && [[ -z $force ]]; then
            echo "[+] Moving $to to $to.$backup"
            mv $to $to.$backup
        elif [[ -d $to ]]; then
            echo "[+] Removing directory $to"
            rm -rf $to
        elif [[ -f $to ]]; then
            echo "[+] Removing file $to"
            rm -f $to
        else
            # echo "[+] Ensuring $(dirname $to) exists"
            mkdir -p $(dirname $to)
        fi

        echo "[+] Symlinking $from to $to"
        ln -s $from $to
    done; unset entry
    echo "[+] Successfully linked milesrc"

    if [[ -n $install_vim_plugins ]]; then
        if [[ -z $(command -v git) ]]; then
            echo "[!] Can not install vim plugins without git"
        elif [[ ! -f $here/vim/autoload/plug.vim ]]; then
            echo "[-] Can not install vim plugins without vim-plug"
        else
            echo -n "[+] Installing vim plugins... "
            vim_plugins
            echo "done"
        fi
    fi
}

link_status() {
    for entry in "${files[@]}"; do
        from="$here/${entry/:*/}"
        to="$(eval echo "${entry/*:/}")"

        if [[ ! -e $from ]]; then
            echo "[-] $from does not exist"
            continue
        fi

        if [[ -L $to ]]; then
            already_from="$(\ls -hl $to | awk '{print $NF}')"
            if [[ $already_from == $from ]]; then
                echo "[+] $to is linked"
            else
                echo "[-] $to is not linked"
            fi
        else
            echo "[-] $to is not linked"
        fi
    done; unset entry

    if [[ -d $here/vim ]]; then
        if [[ -d $here/vim/plugs ]]; then
            echo "[+] vim plugins are installed"
        else
            echo "[-] vim plugins are not installed"
        fi
    fi
}

unlink() {
    echo "[+] Unlinking directories and files..."
    for entry in "${files[@]}"; do
        from="$here/${entry/:*/}"
        to="$(eval echo "${entry/*:/}")"

        if [[ -L $to ]]; then
            already_from="$(\ls -hl $to | awk '{print $NF}')"
            if [[ $already_from == $from ]]; then
                echo "[+] Removing symlink for $to"
                rm $to
            else
                echo "[!] Did not unlink $to as it was not linked"
            fi
        fi

        if [[ ! -e $to ]] && [[ -e $to.$backup ]]; then
            echo "[+] Restoring $to.$backup to $to"
            mv $to.$backup $to
        elif [[ -e $to ]] && [[ ! -L $to ]]; then
            echo "[!] Could not unlink $to as it was not a symlink"
        fi

        if [[ -e $to.$backup ]]; then
            echo "[!] Did not restore backup of $to"
        fi
    done; unset entry
    echo "[+] Successfully unlinked milesrc"

    if [[ -d $here/vim/plugs ]]; then
        echo -n "[+] Removing vim plugins... "
        rm -rf $here/vim/plugs
        echo "done"
    fi
}

usage() {
    echo "Usage: ${0/*\//} [OPTIONS] <action>"
    echo "Options:"
    echo "    -f, --force    Do not make backups"
    echo "    -h, --help     Display this help message"
    echo "    -v, --vim      Install vim plugins when linking"
    echo
    echo "Actions:"
    echo "    link"
    echo "        Back up existing dotfiles and symlink milesrc"
    echo "    status"
    echo "        Show what's linked and what isn't"
    echo "    unlink"
    echo "        Remove symlinks and restore old configs"
    echo
    exit $1
}

vim_plugins() {
    mkdir -p $here/vim/plugs
    vim -c :PlugUpgrade -c :q
    [[ $? -eq 0 ]] || exit $?
    rm -f $here/vim/autoload/plug.vim.old
    vim -c :PlugUpdate -c ":sleep 1" -c :q -c :q
    [[ $? -eq 0 ]] || exit $?
}

declare -a args
unset force install_vim_plugins
backup="milesrc.bak"
here="$(pwd)"

while [[ $# -gt 0 ]]; do
    case "$1" in
        "--") shift && args+=("$@") && break ;;
        "-f"|"--force") force="true" ;;
        "-h"|"--help") usage 0 ;;
        "-v"|"--vim") install_vim_plugins="true" ;;
        *) args+=("$1") ;;
    esac
    shift
done
[[ -z ${args[@]} ]] || set -- "${args[@]}"

[[ $# -eq 1 ]] || usage 1

declare -a files
files=($(\grep -Ev "^(\s*#|$)" files.default))
[[ ! -f files ]] || files=($(\grep -Ev "^(\s*#|$)" files))

case "$1" in
    "link") link ;;
    "status") link_status ;;
    "unlink") unlink ;;
    *) usage 2 ;;
esac
