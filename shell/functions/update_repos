#!/usr/bin/env bash
# A convenience script for updating all git repos under a directory.
# by Miles Whittaker <mjwhitta@gmail.com>
#
# --------------------------------------------------------------------
# The MIT License (MIT)
#
# Copyright (c) 2018 Miles Whittaker
#
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation files
# (the "Software"), to deal in the Software without restriction,
# including without limitation the rights to use, copy, modify, merge,
# publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
# BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
# --------------------------------------------------------------------

function update_repos() {
    function ur_cleanup() {
        unset args count dir ext parallel repos stash total
        unset -f ur_cleanup ur_update ur_usage
    }

    function ur_update() {
        dir="$1"
        case "$1" in
            *"archived"*) return ;;
        esac
        (
            repo="$(dirname $1)"
            \cd $repo
            if [[ -n $(git config remote.origin.url) ]]; then
                stash="$(
                    git status --porcelain | \grep -E "^[^#?]{2}"
                )"
                if [[ -n $stash ]]; then
                    echo -e "\e[33m[-] $repo: stashing changes\e[0m"
                    git stash &>/dev/null
                    if [[ $? -ne 0 ]]; then
                        echo -e "\e[31m[!] $repo: error ocurred\e[0m"
                        return
                    fi
                fi

                echo -e "\e[32m[+] $repo: pulling changes\e[0m"
                git pull -r &>/dev/null
                if [[ $? -ne 0 ]]; then
                    echo -e "\e[31m[!] $repo: error ocurred\e[0m"
                    return
                fi

                git pull --all &>/dev/null
                if [[ $? -ne 0 ]]; then
                    echo -e "\e[31m[!] $repo: error ocurred\e[0m"
                    return
                fi

                if [[ -n $stash ]]; then
                    echo -e "\e[33m[-] $repo: restoring changes\e[0m"
                    git stash pop &>/dev/null
                    if [[ $? -ne 0 ]]; then
                        echo -e "\e[31m[!] $repo: error ocurred\e[0m"
                        return
                    fi
                fi
            else
                echo -e "\e[33m[-] $repo: no remote origin\e[0m"
            fi
        )
    }

    function ur_usage() {
        echo "Usage: update_repos [OPTIONS] <dir>"
        echo
        echo "Update git repos under specified directory"
        echo
        echo "Options:"
        echo "    -h, --help           Display this help message"
        echo "    -p, --parallel       Run using parallel (if"
        echo "                         installed)"
        echo "    -t, --threads=NUM    Use the specified number of"
        echo "                         threads if running in parallel"
        echo "                         (default: $threads)"
        echo
        ur_cleanup
    }

    declare -a args
    unset dir parallel
    threads="32"

    while [[ $# -gt 0 ]]; do
        case "$1" in
            "--") shift && args+=("$@") && break ;;
            "-h"|"--help") ur_usage; return 0 ;;
            "-p"|"--parallel") parallel="true" ;;
            "-t"|"--threads"*)
                case "$1" in
                    "--"*"="*)
                        arg="${1#*=}"
                        [[ -z $arg ]] && ur_usage && return 1
                        ;;
                    *)
                        shift
                        [[ $# -eq 0 ]] && ur_usage && return 1
                        arg="$1"
                        ;;
                esac
                threads="$arg"
                ;;
            *) args+=("$1") ;;
        esac
        shift
    done
    [[ -z ${args[@]} ]] || set -- "${args[@]}"

    [[ $# -ne 1 ]] && ur_usage && return 2
    if [[ -z $(command -v git) ]]; then
        echo "git is not installed"
        return 3
    fi

    ext="zsh"
    [[ -z $BASH ]] || ext="bash"

    if [[ -n $parallel ]]; then
        if [[ -z $(command -v parallel) ]] ||
           [[ -z $(command -v env_parallel.$ext) ]]
        then
            echo "Parallel is not installed, using default behavior"
            unset parallel
        fi
    fi

    # Doesn't work with zsh right now
    [[ -n $BASH ]] || unset parallel

    declare -a repos
    repos=($(
        find $1 -ipath "*archived*" -prune -o -type d -name ".git" \
        2>/dev/null | \grep -iv "archived"
    ))
    let "total = ${#repos[@]}"

    if [[ -n $parallel ]]; then
        source $(command -v env_parallel.$ext)
        echo -e "\e[32m[+] $total repos to update\e[0m"
        env_parallel -P $threads ur_update {} ::: \
            ${repos[@]}
    else
        let "count = 1"
        for repo in "${repos[@]}"; do
            echo -e "\e[37m[$count/$total]\e[0m" >&2
            ur_update $repo
            let "count += 1"
        done; unset repo
    fi

    ur_cleanup
}

if [[ -n ${BASH_SOURCE[0]} ]]; then
    case "$0" in
        *"bash") ;;
        *) update_repos "$@" ;;
    esac
fi
