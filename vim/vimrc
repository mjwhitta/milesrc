" {{{ Settings
if exists('&background')
    set background=dark
endif

" Minimal GUI for gvim
if exists('&guioptions')
    set guioptions=a
endif

" Generic stuff
if exists('&compatible')
    set nocompatible
endif
if exists(':syntax')
    " Hide error thrown if syntax file doesn't exist
    silent! syntax enable
endif
if exists(':filetype')
    filetype on
    filetype plugin on
endif

" Max memory for pattern matching (in KB)
if exists('&maxmempattern')
    set maxmempattern=2000000
endif

" No default message when opening vim with no args and abbrev messages
if exists('&shortmess')
    set shortmess+=aI
endif

" Show current mode
if exists('&showmode')
    set showmode
endif

" Split more intuitively
if exists('&splitbelow')
    set splitbelow
endif
if exists('&splitright')
    set splitright
endif

" Folding
" if exists('&foldopen')
"     set foldopen=all " Unfold automatically when entering fold
" endif
" if exists('&foldclose')
"     set foldclose=all " Fold automatically when leaving fold
" endif
if exists('&foldnestmax')
    set foldnestmax=2 " Don't fold more than 2 layers
endif
if exists('&foldlevelstart')
    " set foldlevelstart=0 " Fold by default
    set foldlevelstart=99 " Don't fold any by default
endif

" Mouse support
if exists('&mouse')
    set mouse=a
endif

" Fold text
if exists('&foldtext') && exists(':function')
    set foldtext=NeatFoldText()
endif

" Netrw
if exists(':let')
    " Hide netrw banner
    let g:netrw_banner = 0

    " Don't actually keep history
    let g:netrw_dirhistmax = 0

    " Sort case-insensitive, by name, long-list stlye
    let g:netrw_liststyle = 1
    let g:netrw_sort_options = 'i'
    let g:netrw_sort_sequence = ''

    " Hide .gitignore stuff and files I won't open in vim
    let g:netrw_list_hide = ''
    silent! let g:netrw_list_hide .= netrw_gitignore#Hide()
    let g:netrw_list_hide .= ',.*\.\(class\|jar\|jpg\|png\|pyc\|so\)'
    let g:netrw_list_hide .= ',.*\.\(git[/-]\|swp\),tags,.*\.DS_Store'
endif

" Allows show atleast 4 lines above/below the cursor
if exists('&scrolloff')
    set scrolloff=4
endif

" Wildignore
if exists('&wildignore')
    set wildignore+=*/*.class
    set wildignore+=*/*.jar
    set wildignore+=*/*.jpg
    set wildignore+=*/*.png
    set wildignore+=*/*.pyc
    set wildignore+=*/*.so
    set wildignore+=*/*.swp
    "set wildignore+=*/*.vim
endif

" Case-insensitive
if exists('&wildignorecase')
    set wildignorecase
endif

" Backspace
if exists('&backspace')
    set backspace=indent,eol,start
endif

" Grep options
if exists('&grepprg')
    if executable('rg')
        set grepprg=rg\
            \ --line-number\
            \ --no-heading\
            \ --no-messages\
            \ --smart-case\
            \ --with-filename\
            \ $*
    elseif executable('ag')
        set grepprg=ag\
            \ --filename\
            \ --nobreak\
            \ --noheading\
            \ --numbers\
            \ --silent\
            \ --smart-case\
            \ $*
    elseif executable('ack-grep')
        set grepprg=ack\
            \ --nobreak\
            \ --nogroup\
            \ --noheading\
            \ -s\
            \ --smart-case\
            \ --with-filename\
            \ $*
    elseif executable('ack')
        set grepprg=ack\
            \ --nobreak\
            \ --nogroup\
            \ --noheading\
            \ -s\
            \ --smart-case\
            \ --with-filename\
            \ $*
    else
        set grepprg=grep\
            \ --binary-files=without-match\
            \ --exclude-dir=\.bzr\
            \ --exclude-dir=\.git-crypt\
            \ --exclude-dir=\.git\
            \ --exclude-dir=\.hg\
            \ --exclude-dir=\.svn\
            \ --extended-regexp\
            \ --ignore-case\
            \ --line-number\
            \ --no-messages\
            \ --recursive\
            \ --with-filename\
            \ $*
    endif
endif

" Status line incase Airline isn't used
if exists('&statusline')
    set statusline=%r%m%y\ %.30F%=%c%V,%l/%L\ %02p%%\ [%02B]
endif
if exists('&ttimeoutlen')
    set ttimeoutlen=50
endif
if exists('&laststatus')
    set laststatus=2
endif
if exists('&encoding')
    set encoding=utf-8
endif

" Spaces instead of tab
if exists('&expandtab')
    set expandtab
endif
if exists('&shiftwidth')
    set shiftwidth=4
endif
if exists('&softtabstop')
    set softtabstop=4
endif
if exists('&tabstop')
    set tabstop=4
endif
if exists('&smarttab')
    set smarttab
endif

" Indentation for C/C++ header files
if exists('&cinoptions')
    set cinoptions=g0
endif

" Break indent
if exists('&breakindent')
    set breakindent
endif

" Shows command
if exists('&showcmd')
    set showcmd
endif

" Tab completion
if exists('&path')
    set path+=**
endif
if exists('&wildmenu')
    set wildmenu
endif
if exists('&wildmode')
    set wildmode=list:longest,full
endif

" Relative line numbers
" if exists('&relativenumber')
"     set relativenumber
" endif

" Line numbers
if exists('&number')
    set number
endif

" Use only 1 space after '.' when joining lines
if exists('&joinspaces')
    set nojoinspaces
endif

" Optimize for fast terminals
if exists('&ttyfast')
    set ttyfast
endif

" Ignore case
if exists('&ignorecase')
    set ignorecase
endif

" AI
if exists('&smartcase')
    set smartcase
endif

" Incremental search
if exists('&incsearch')
    set incsearch
endif

" Highlight search
if exists('&hlsearch')
    set hlsearch
endif

" Line wrap
if exists('&wrap')
    set wrap
endif
if exists('&linebreak')
    set linebreak
endif
if exists('&list')
    set nolist
endif

" Set textwidth for wrapping
if exists('&tw')
    set tw=70
endif

" Highlight column 71
if exists('&colorcolumn')
    set colorcolumn=71
endif

" Highlight current column and line
" if exists('&cursorcolumn')
"     set cursorcolumn
" endif
if exists('&cursorline')
    set cursorline
endif

" Needed for Airline and colorscheme
if exists('&t_Co')
    set t_Co=256
endif
if exists('&t_ut') && &term =~ '256color'
    set t_ut=
endif

" Highlight matching brackets
if exists('&showmatch')
    set showmatch
endif

" File type stuff
if exists('&fileformats')
    set fileformats=unix
endif
if exists('&ff')
    set ff=unix
endif

" Current position
if exists('&ruler')
    set ruler
endif

" Don't make backups
if exists('&backup')
    set nobackup
endif
if exists('&writebackup')
    set nowritebackup
endif

" Don't use swp files, but if I have to, put them in home directory
if exists('&swapfile')
    set noswapfile
else
    if exists('&directory')
        if !isdirectory($HOME . '/.swp')
            silent! call mkdir($HOME . '/.swp', 'p')
        endif
        set directory=$HOME/.swp,.
    endif
endif
" }}}

" {{{ Key-bindings
" Leader
if exists(':let')
    let mapleader = ','
endif

" Swap : and ; for convenience
nnoremap ; :
vnoremap ; :
nnoremap : ;
vnoremap : ;

" Remap jk and kj to ESC
inoremap jk <esc>l
inoremap kj <esc>l

" Help for word under the cursor
nnoremap <leader><leader>h :help <C-r><C-w><cr>

" Show number of matches immediately after search
if !has('nvim')
    if exists(':function')
        cmap <expr> <cr> getcmdtype() =~ '[/?]' ?
            \ "\<cr>\<plug>CountMatches" : "\<cr>"
    endif
endif

" Omni-completion
if exists('&completeopt')
    set completeopt=menu,menuone,preview
    silent! set completeopt+=noselect
    if exists('&complete')
        set complete-=i " Do not scan included files
        set complete-=t " Do not scan tags
        " if &completeopt =~ 'noselect'
        "     set complete+=k " Scan dictionary... nevermind, too slow
        " endif
    endif
endif
if exists('&dictionary') && filereadable('/usr/share/dict/words')
    set dictionary+=/usr/share/dict/words
endif

" Why does the next line not work right? FIXME
" inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<cr>"
inoremap <expr> <space> pumvisible() ? "\<C-y> " : " "
inoremap <expr> <tab>
    \ strpart(getline('.'), 0, col('.') - 1) =~ '^\s*$' ?
    \ "\<tab>" : "\<C-n>"
inoremap <expr> <S-tab> pumvisible() ? "\<C-p>" : "\<S-tab>"

" Hexmode
nnoremap <leader>h :%!xxd<cr>
nnoremap <leader>rh :%!xxd -r<cr>
nnoremap <leader>hp :%!xxd -p<cr>
nnoremap <leader>rhp :%!xxd -p -r<cr>

" Open quickfix or location list
nnoremap <leader>q :copen<cr>
nnoremap <leader>l :lopen<cr>

" Vim file explorer
nnoremap <silent> f :Explore<cr>

" Search using normal regex mode
nnoremap / /\v
nnoremap ? ?\v

" Find / Replace
nnoremap // :%s///gc<left><left><left>

" Clear search highlight
nnoremap <C-l> :set spelllang=<cr>:noh<cr><C-l>
inoremap <C-l> <esc>l:set spelllang=<cr>:noh<cr><C-l>i

" Search, center and show number of matches
if exists(':function') && !has('nvim')
    nnoremap n nzz:call CountMatches()<cr>
    nnoremap N Nzz:call CountMatches()<cr>
    nnoremap gd gdzz:call CountMatches()<cr>
    nnoremap gh *Nzz:call CountMatches()<cr>
    nnoremap gc xu/<C-r>-<cr>Nzz:call CountMatches()<cr>
else
    nnoremap n nzz
    nnoremap N Nzz
    nnoremap gd gdzz
    nnoremap gh *Nzz
    nnoremap gc xu/<C-r>-<cr>Nzz
endif

" Grep for word under cursor
nnoremap <silent> <leader>g :grep <C-r><C-w><cr>:copen<cr>
" Commented out b/c it includes the \v from the previous search =(
"nnoremap <silent> <leader><leader>g :grep <C-r>/<cr>:copen<cr>

" Toggle fold
" Actually <C-/>
nnoremap <C-_> za
inoremap <C-_> <esc>za

" Move lines up and down
" Doesn't work at top/bottom of file
nnoremap - ddp
nnoremap = ddkkp

" Make Y behave more like D and C
nnoremap Y y$

" Close buffer
nnoremap <silent> qq :bd<cr>

" Show buffers
nnoremap <silent> <leader>b :buffers<cr>:buffer<space>

" Next buffer
nnoremap <silent> <C-j> :bnext<cr>

" Prev buffer
nnoremap <silent> <C-k> :bprevious<cr>

" Save file
nnoremap <silent> <C-s> :w<cr>

" Format all
nnoremap <silent> <leader>F ggVG=

" Open vimrc in new tab
nnoremap <silent> <leader>ev :e $HOME/.vimrc<cr>

" Source vimrc
nnoremap <silent> <leader>sv :source $HOME/.vimrc<cr>

" Wrap word with quotes or parens
nnoremap <leader>" viw<esc>bi"<esc>ea"<esc>l
nnoremap <leader>' viw<esc>bi'<esc>ea'<esc>l
nnoremap <leader>( viw<esc>bi(<esc>ea)<esc>l
nnoremap <leader>[ viw<esc>bi[<esc>ea]<esc>l
nnoremap <leader>{ viw<esc>bi{<esc>ea}<esc>l
nnoremap <leader>< viw<esc>bi<<esc>ea><esc>l

" Wrap line at textwidth
nnoremap <leader>w vipgq{j

" For pasting lines of text from system clipboard
nnoremap <leader>v :call ClipboardPaste("+", "l")<cr>

" For pasting characters of text from system clipboard
nnoremap <leader>V :call ClipboardPaste("+", "c")<cr>
" }}}

" {{{ Autocmds
if exists(':augroup')
    augroup foldmethod
        autocmd!
        if exists('&foldmethod')
            autocmd FileType c,cpp,go,h,java,json,python,ruby,sh
                \ setlocal foldmethod=syntax

            autocmd FileType vim setlocal foldmethod=marker

            autocmd BufReadPost .bashrc setlocal foldmethod=marker
            autocmd BufReadPost bashrc setlocal foldmethod=marker
            autocmd BufReadPost .milesrc.* setlocal foldmethod=marker
            autocmd BufReadPost milesrc.* setlocal foldmethod=marker
            autocmd BufReadPost milesrc setlocal foldmethod=marker
            autocmd BufReadPost .tmux.* setlocal foldmethod=marker
            autocmd BufReadPost tmux.* setlocal foldmethod=marker
            autocmd BufReadPost .zshrc setlocal foldmethod=marker
            autocmd BufReadPost zshrc setlocal foldmethod=marker
        endif
    augroup END

    augroup foldnestmax
        if exists('&foldnestmax')
            autocmd FileType json setlocal foldnestmax=20
        endif
    augroup END

    augroup ghmarkdown
        autocmd!
        if exists('&filetype')
            autocmd BufNewFile,BufRead *.markdown,*.md setlocal
                \ filetype=ghmarkdown
        endif
    augroup END

    augroup indentation
        autocmd!
        if exists('&shiftwidth')
            autocmd FileType c,cpp,h,java,python,ruby,sh setlocal
                \ shiftwidth=4
        endif
        if exists('&softtabstop')
            autocmd FileType c,cpp,h,java,python,ruby,sh setlocal
                \ softtabstop=4
        endif
        if exists('&tabstop')
            autocmd FileType c,cpp,h,java,python,ruby,sh setlocal
                \ tabstop=4
        endif
    augroup END

    " Close QuickFix if only window left
    augroup quickfixclose
        autocmd!
        autocmd WinEnter * if winnr('$') == 1 &&
            \ getbufvar(
                \ winbufnr(winnr()),
                \ '&buftype'
            \ ) == 'quickfix' | q | endif
    augroup END

    augroup spellcheck
        autocmd!
        if exists('&filetype')
            autocmd BufRead,BufNewFile *mutt-* set filetype=mail
        endif
        if exists('&spell')
            autocmd BufWritePost *.markdown,*.md,*.txt setlocal
                \ spell spelllang=en_us
            autocmd FileType mail setlocal spell spelllang=en_us
        endif
    augroup END

    " vimrc on-the-fly changes
    augroup vimrc
        autocmd!
        autocmd BufWritePost .vimrc source $HOME/.vimrc
        autocmd BufWritePost vimrc source $HOME/.vimrc
    augroup END
endif
" }}}

" {{{ Abbreviations
if has('diff') && &diff
    cabbrev q qall
endif

iabbrev adn and
iabbrev borken broken
iabbrev hte the
iabbrev teh the
iabbrev tehn then
iabbrev waht what
" }}}

" {{{ Functions
if exists(':function')
    function! ClipboardPaste(regname, pasteType)
        let l:reg_type = getregtype(a:regname)

        call setreg(a:regname, getreg(a:regname), a:pasteType)
        set paste

        if a:pasteType == "c" || a:pasteType == "v"
            silent! execute 'normal "' . a:regname . "P"
        elseif a:pasteType == "l" || a:pasteType == "V"
            silent! execute 'normal "' . a:regname . "p"
        endif

        set nopaste
        call setreg(a:regname, getreg(a:regname), l:reg_type)
    endfunction

    function! CountMatches()
        " Save the current search and cursor position
        let l:s = @/
        let l:l = line('.')
        let l:c = col('.')

        " Get current match
        let l:output = ''
        redir => l:output
            silent! execute '0,' . l:l . 's///eng'
        redir END
        let l:cur = str2nr(matchstr(l:output, '\d\+'))

        " TODO fix count for lines with multiple matches
        " let l:output = ''
        " redir => l:output
        "     silent! execute l:l . 's///eng'
        " redir END
        " let l:line_matches = str2nr(matchstr(l:output, '\d\+'))

        " Get total matches
        let l:output = ''
        redir => l:output
            silent! execute '%s///eng'
        redir END
        let l:tot = str2nr(matchstr(l:output, '\d\+'))

        echo '(' . l:cur . ' of ' . l:tot . ')'
        ". ':' . getline('.')

        " Restore the saved search and cursor position
        let @/ = l:s
        call cursor(l:l, l:c)
    endfunction
    if !has('nvim')
        nnoremap <silent> <plug>CountMatches :call CountMatches()<cr>
    endif

    function! FormatXML()
        silent! execute '%s/\v\</\</g'
        silent! execute '%s/\v\>/\>/g'
        call StripWhitespace()
        silent! execute 'g/\v^$/d'
        silent! execute 'normal ggVG='
    endfunction
    if exists(':command')
        command! FormatXML call FormatXML()
    endif

    function! NeatFoldText()
        let l:mywidth = 70
        let l:line = ' ' .
            \ substitute(
                \ getline(v:foldstart),
                \ '^\s*["#]\?\s*\|\s*["#]\?\s*{{' . '{\d*\s*',
                \ '',
                \ 'g'
            \ ) . ' '
        let l:lines_count = v:foldend - v:foldstart + 1
        let l:lines_count_text = '| ' .
            \ printf(
                \ '%10s',
                \ l:lines_count . ' lines'
            \ ) . ' |'
        let l:foldchar = matchstr(&fillchars, 'fold:\zs.')
        if has('nvim')
            let l:foldchar = matchstr("vert:|,fold:-", 'fold:\zs.')
        endif
        let l:foldtextstart = strpart(
            \ '+' .
            \ repeat(
                \ l:foldchar,
                \ v:foldlevel * 2
            \ ) .
            \ l:line,
            \ 0,
            \ (l:mywidth - 15)
        \ )
        let l:foldtextend = l:lines_count_text
        " . repeat(l:foldchar, 8)
        let l:foldtextlength = strlen(
            \ substitute(
                \ l:foldtextstart . l:foldtextend,
                \ '.',
                \ 'x',
                \ 'g'
            \ )
        \ ) + &foldcolumn
        return l:foldtextstart . repeat(
            \ l:foldchar,
            \ l:mywidth - l:foldtextlength
        \ ) . l:foldtextend
    endfunction

    function! StripWhitespace()
        " Save the current search and cursor position
        let l:s = @/
        let l:l = line('.')
        let l:c = col('.')

        " Strip the whitespace
        silent! execute ':%s/\s\+$//eg'

        " Restore the saved search and cursor position
        let @/ = l:s
        call cursor(l:l, l:c)
    endfunction
    if exists(':command')
        command! StripWhitespace call StripWhitespace()
    endif
endif

if exists(':command') && executable('jq') && executable('less')
    command! JQ :w !jq -M -r -S . | less
endif
" }}}

" {{{ Local vimrc
if filereadable(glob($HOME . '/.vimrc.local'))
    source $HOME/.vimrc.local
endif
" }}}

" {{{ Vim Plugins
if empty(glob($HOME . '/.vim/autoload/plug.vim'))
    silent! execute '!curl --create-dirs -f -L ' .
        \ '-o ' . $HOME . '/.vim/autoload/plug.vim -s ' .
        \ 'https://raw.githubusercontent.com/junegunn/vim-plug' .
        \ '/master/plug.vim'
endif

if exists(':function') && exists(':let')
    silent! call plug#begin($HOME . '/.vim/plugs')
    if exists(':Plug')
        let g:plug_window = 'topleft new'

        " Install or update vim plugins
        Plug 'dense-analysis/ale'
        Plug 'ctrlpvim/ctrlp.vim'
        " Plug 'Yggdroot/indentLine'
        Plug 'tpope/vim-abolish'
        Plug 'tpope/vim-commentary'
        Plug 'junegunn/vim-easy-align'
        " Plug 'tpope/vim-endwise'
        Plug 'jtratner/vim-flavored-markdown'
        if executable('git')
            Plug 'tpope/vim-fugitive'
            Plug 'airblade/vim-gitgutter'
        endif

        " Plugs for themes
        Plug 'dracula/vim', {'as': 'dracula'}
        Plug 'phanviet/vim-monokai-pro'
        Plug 'widatama/vim-phoenix'
        Plug 'lifepillar/vim-solarized8'
        Plug 'boschni/vim-sublime256'
        Plug 'hardselius/warlock'

        " Abolish
        nnoremap /// :%S///gc<left><left><left><left>

        " ALE
        let g:ale_open_list = 1
        let g:ale_set_highlights = 1
        let g:ale_set_signs = 1
        nnoremap <leader>ale :ALEToggle<cr>

        " Commentary
        nmap <leader>c <plug>CommentaryLine

        " CtrlP
        if executable('rg')
            let g:ctrlp_user_command = 'rg --color=never --files ' .
                \ '--follow --hidden ' .
                \ '--iglob "!.bzr" ' .
                \ '--iglob "!.git" ' .
                \ '--iglob "!.git-crypt" ' .
                \ '--iglob "!.hg" ' .
                \ '--iglob "!.svn" ' .
                \ '--no-messages %s'
        elseif executable('ag')
            let g:ctrlp_user_command = 'ag --follow -g ".*" ' .
                \ '--hidden ' .
                \ '--ignore ".bzr" ' .
                \ '--ignore ".git" ' .
                \ '--ignore ".git-crypt" ' .
                \ '--ignore ".hg" ' .
                \ '--ignore ".svn" ' .
                \ '--nocolor --silent %s'
        endif
        let g:ctrlp_map = '<leader>f'
        let g:ctrlp_cmd = 'CtrlPCurWD'
        let g:ctrlp_match_window = 'bottom,order:btt,max:30'
        nnoremap <leader>t :CtrlPTag<cr>

        " Easy align
        vmap <cr> <plug>(EasyAlign)
        nnoremap <leader>eat vip:EasyAlign<space>*\|<cr>

        " Fugitive
        if exists('&tags')
            set tags^=.tags
        endif

        " Git gutter
        if exists('&updatetime')
            set updatetime=100
        endif
        nnoremap <leader>ggq :GitGutterQuickFix<cr>:copen<cr>

        " indentLine
        " let g:indentLine_char = '|' " For spaces
        " if exists('&list')
        "     set list listchars=tab:\|\ " For tabs (trailing space)
        " endif

        " Python-mode
        if exists(':filetype')
            filetype plugin indent on
        endif
    endif
    silent! call plug#end()
endif

" Colorscheme
if exists(':colorscheme')
    if exists('&termguicolors')
        set notermguicolors
    endif

    try
        colorscheme dracula
        " colorscheme monokai_pro
        " colorscheme phoenix
        " colorscheme solarized8
        " colorscheme sublime256
        " colorscheme warlock

        if exists('&termguicolors')
            if g:colors_name =~ "dracula"
                set termguicolors
            elseif g:colors_name =~ "monokai_pro"
                set termguicolors
            elseif g:colors_name =~ "phoenix"
                set termguicolors
            elseif g:colors_name =~ "solarized8"
                set termguicolors
            elseif g:colors_name =~ "warlock"
                set termguicolors
            endif
        endif
    catch
    endtry
endif

" Trailing whitespace (has to come after colorscheme)
if exists(':highlight') && exists(':syntax')
    highlight ExtraWhitespace ctermbg=red guibg=#ff327f
    syntax clear ExtraWhitespace | match ExtraWhitespace /\s\+$/
endif
" }}}
