# If not running interactively, don't do anything
[[ $- == *i* ]] || return

# {{{ Env Vars
declare -a MILESRC_PROMPT
MILESRC_PROMPT=(
    # "host;white;blue;remote;white;56;root;white;160;hide_local;true"
    "host;white;blue;root;white;160"
    "venv;white;166"
    "git;light_black;white"
    "cwd;white;light_black"
    "exit;red;light_black;emotes;green;light_black"
    "vi_ins;white;green;vi_cmd;white;blue;vi_rep;white;124"
    "newline"
    "prompt;white;light_black"
)
export MILESRC_PROMPT

# Let's make an educated guess
for dir in code projs projects src; do
    [[ -d $HOME/$dir ]] && export PROJS="$HOME/$dir" && break
done; unset dir
# }}}

# {{{ PATH
# }}}

# {{{ Aliases
alias dt="tmux -2 new -d -s"
alias et="exec tmux -2 new -A -s"
alias j="\cd \$(cat $HOME/.proj 2>/dev/null)"
[[ -z $(installed pwsh) ]] || alias powershell="TERM=xterm pwsh"
alias save="pwd >\$HOME/.proj"

# Git aliases
if [[ -n $(installed git) ]]; then
    full="--date=format-local:\"%F_%H%M%S\" --full-history"
    minimal="-b --color-words=. --ignore-blank-lines --minimal"
    tformat="tformat:\"%Cred%h %Cgreen%cd %Cblue%an%Creset %s\""

    alias diff="git diff $minimal"
    alias gd="git diff $minimal"
    alias gl="git log $full --pretty=$tformat"
    alias grh="git reset --hard"
    alias gs="git status -bs"
    alias gsm="git show $minimal"

    unset full minimal tformat
fi
# }}}

# {{{ Functions
# List directories reachable from CDPATH
function lscd() {
    [[ -n $CDPATH ]] || return
    while read -r dir; do
        ls $dir
    done < <(echo "$CDPATH" | sed "s/:/\n/g"); unset dir
}

function moon() { clear; curl -s wttr.in/Moon | head -n -2; }

function weather() {
    clear
    url="wttr.in/~${1:-Lafayette,IN}?Q"
    [[ $COLUMNS -ge 125 ]] || url="${url}n"
    curl -s "$url" | head -n -2
    unset url
}

function wunder() {
    echo -e "\nLAF\nX\n" | nc rainmaker.wunderground.com 23 | \
    grep --color=none -A 2 "Temp(F)"
}

# I like ruby-zoom, but in case it's not installed, create functions
if [[ -z $(installed z | grep -s "gem") ]]; then
    function z() {
        if [[ -n $(installed rg) ]]; then
            rg $@
        elif [[ -n $(installed ag) ]]; then
            ag $@
        elif [[ -n $(installed ack-grep) ]]; then
            ack-grep $@
        elif [[ -n $(installed ack) ]]; then
            ack $@
        else
            grep -HnPr $@
        fi
    }
    function zf() {
        find . -regextype posix-extended -iregex ".*$*.*" -print
    }
fi
# }}}

case "$MILESRC_SHELL" in
    *bash)
        # {{{ Bash completions
        # Complete arTTY
        if [[ -n $(installed arTTY) ]]; then
            _arTTY_complete() {
                mapfile -t COMPREPLY < <(
                    arTTY --ls | grep -iPs "^$2" | sort -u
                )
            }
            complete -F _arTTY_complete arTTY
        fi
        # }}}
        ;;
    *zsh)
        # {{{ Zsh completions
        # Complete arTTY
        if [[ -n $(installed arTTY) ]]; then
            compdef _gnu_generic arTTY
            _arTTY_complete() {
                reply=($(arTTY --ls))
            }
            compctl -K _arTTY_complete arTTY
        fi

        # Complete ruby-zoom commands
        compdef _gnu_generic z zc zf zg zl zr
        # }}}
        ;;
esac

# {{{ Wrap-up
# My weechat configs
[[ ! -f $HOME/.weechat/irc ]] || . $HOME/.weechat/irc

# Config for this host
[[ ! -f $HOME/.milesrc.$(uname -n) ]] || . $HOME/.milesrc.$(uname -n)

if [[ -n $(installed arTTY) ]]; then
    alias nt="arTTY \$(head -n 1 \$HOME/.config/arTTY/rc)"
    arTTY $(head -n 1 $HOME/.config/arTTY/rc)
elif [[ -n $(command -v nt) ]]; then
    nt
else
    clear
fi
# }}}
