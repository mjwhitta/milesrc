# If not running interactively, don't do anything
[[ $- == *i* ]] || return

# The magic happens in this file.

# {{{ Helper utils
function join_with() { local IFS="$1"; echo "${*:2}"; }

export MILESRC_SHELL="$(command -v zsh)"
[[ -z $BASH ]] || export MILESRC_SHELL="$BASH"
# }}}

# {{{ Bootstrap PATH
# Find minimum dirs that should be in PATH before doing anything else
unset PTH
for dir in \
    "$HOME/bin" "$HOME/.local/bin" \
    "$HOME/.config/$(basename "$MILESRC_SHELL")/scripts" \
    /usr/local/bin /usr/local/sbin \
    /usr/bin /usr/sbin \
    /bin /sbin
do
    [[ ! -d "$dir" ]] || PTH="${PTH:+$PTH:}$dir"
done; unset dir

# Set PATH
[[ -z $PTH ]] || export PATH="$PTH"
unset PTH
# }}}

# {{{ User configs
# Local stuff
[[ ! -f "$HOME/.milesrc/local/pre" ]] || . "$HOME/.milesrc/local/pre"
if [[ -n $(command -v tmux) ]] &&
   [[ -z $TMUX ]] &&
   [[ -n $MILESRC_TMUX ]]
then
    case "$SSH_CONNECTION" in
        "127."*|"localhost"*) ;;
        *) exec tmux -2 new -A -s "$(hostname -s)" ;;
    esac
fi
if [[ -f "$HOME/.milesrc/shell/milesrc.ssh_agent" ]]; then
    . "$HOME/.milesrc/shell/milesrc.ssh_agent"
fi
# }}}

case "$MILESRC_SHELL" in
    *"bash")
        # {{{ Bash setup
        # export BASHV="$(
        #     bash --version | grep -m 1 -oPs "version \K\d+\.\d+"
        # )"

        # History settings
        export HISTFILE="$HOME/.histfile.bash"
        export HISTSIZE="1000"
        export HISTFILESIZE="2000"
        export HISTCONTROL="ignoreboth"
        shopt -s histappend #histverify

        # Don't need to type cd
        shopt -s autocd

        # Fix common typos when cd'ing
        shopt -s cdspell
        shopt -s dirspell

        # Multi-line command history
        shopt -s cmdhist

        # Enable programmable completion features (you don't need to
        # enable this, if it's already enabled in /etc/bash.bashrc and
        # /etc/profile sources /etc/bash.bashrc).
        # Don't use [] around shopt command
        if [[ -f /etc/bash_completion ]] && ! shopt -oq posix; then
            . /etc/bash_completion
        fi

        # Super globs
        shopt -s globstar extglob nocasematch

        # Check the window size after each command and, if necessary,
        # update the values of LINES and COLUMNS.
        shopt -s checkwinsize

        if [[ -n $MILESRC_VI_BINDINGS ]]; then
            # vi keybindings
            set -o vi

            # Bind jk/kj to escape or vi-movement-mode
            bind -m vi-insert '"jk":vi-movement-mode'
            bind -m vi-insert '"kj":vi-movement-mode'

            # Fix some vi keybindings
            bind '"^?":backward-delete-char'
            bind '"^H":backward-delete-char'
            bind '"":clear-screen'
            bind '"^U":kill-line'
            bind '"^W":backward-kill-word'

            if [[ -n $(bind -P | grep -s "history-substring-searc") ]]
            then
                bind -m vi-move \
                    '"k":history-substring-search-backward'
                bind -m vi-move '"j":history-substring-search-forward'
            else
                bind -m vi-move '"k":history-search-backward'
                bind -m vi-move '"j":history-search-forward'
            fi
        fi

        # Fix ^S
        [[ -z $(command -v stty) ]] || stty stop ""
        # }}}
        ;;
    *"zsh")
        # {{{ Zsh setup
        # Get version string
        ZSHV="$(zsh --version)"
        # Remove beginning and end of string to get just version
        ZSHV="${ZSHV#* }"
        ZSHV="${ZSHV%% *}"
        # Remove first decimal
        ZSHV="${ZSHV/\./}"
        # Remove the last decimal and anything after
        export ZSHV="${ZSHV%\.*}"

        # History settings
        export HISTFILE="$HOME/.histfile.zsh"
        export HISTSIZE="1000"
        export SAVEHIST="$HISTSIZE"
        setopt incappendhistory histexpiredupsfirst histignorealldups
        setopt histreduceblanks sharehistory

        # Completion style
        zstyle ":completion:*" menu select
        zstyle ":completion:*" rehash true
        zstyle ":completion:*" verbose yes
        zstyle ":completion:*:descriptions" format "%B%d%b"
        zstyle ":completion:*:messages" format "%d"
        zstyle ":completion:*:warnings" format "No matches for: %d"
        zstyle ":completion:*:corrections" format "%B%d (err: %e)%b"
        zstyle ":completion:*" group-name ""
        # Tab completion should be case-insensitive
        zstyle ":completion:*" matcher-list "m:{a-zA-Z}={A-Za-z}"
        # Better completion for killall
        zstyle ":completion:*:killall:*" command \
            "ps -o comm -u \"$(id -nu)\" | tail -n +2"

        zstyle :compinstall filename "$HOME/.zshrc"

        # Don't need to type cd
        setopt autocd notify

        # Don't beep
        unsetopt beep
        setopt nobeep

        # Make cd push the old directory onto the stack
        setopt autopushd

        if [[ -n $MILESRC_VI_BINDINGS ]]; then
            # vi keybindings
            bindkey -v

            # Bind jk/kj to escape
            bindkey -M viins "jk" vi-cmd-mode
            bindkey -M viins "kj" vi-cmd-mode

            # Fix some vi keybindings
            bindkey "^?" backward-delete-char
            bindkey "^H" backward-delete-char
            bindkey "^L" clear-screen
            bindkey "^U" kill-line
            bindkey "^W" backward-kill-word
        fi

        # Turn off terminal driver flow control (CTRL+S/CTRL+Q)
        setopt noflowcontrol
        [[ -z $(command -v stty) ]] || stty -ixon -ixoff

        # Do not kill background processes when closing the shell
        setopt nocheckjobs
        setopt nohup

        # Tab completion enhancements
        setopt autolist
        setopt automenu
        setopt completealiases
        setopt completeinword
        unsetopt listambiguous
        unsetopt menucomplete

        # Change the definition of "word", e.g. with ^W
        autoload select-word-style
        select-word-style shell

        # Super globs
        setopt extendedglob
        unsetopt caseglob
        unsetopt casematch

        # Pound sign in interactive prompt
        setopt interactivecomments

        # Speed up file completion for git
        function __git_files() {
            _wanted files expl "local files" _files
        }

        # History substring search
        autoload up-line-or-beginning-search
        autoload down-line-or-beginning-search
        zle -N up-line-or-beginning-search
        zle -N down-line-or-beginning-search
        if [[ -n $MILESRC_VI_BINDINGS ]]; then
            bindkey -M vicmd "k" up-line-or-beginning-search
            bindkey -M vicmd "j" down-line-or-beginning-search
        fi

        for dir in \
            "$HOME/.config/zsh/plugins/zsh-history-substring-search" \
            /usr/share/zsh/plugins/zsh-history-substring-search
        do
            if [[ -d "$dir" ]]; then
                . "$dir/zsh-history-substring-search.zsh"
                if [[ -n $MILESRC_VI_BINDINGS ]]; then
                    bindkey -M vicmd "k" history-substring-search-up
                    bindkey -M vicmd "j" history-substring-search-down
                fi
                break
            fi
        done; unset dir

        HISTORY_SUBSTRING_SEARCH_HIGHLIGHT_FOUND="bg=007,fg=008"
        export HISTORY_SUBSTRING_SEARCH_HIGHLIGHT_FOUND
        # }}}
        ;;
esac

# {{{ Env Vars
# TERM
# Don't do this as it can break zsh highlighting
# export TERM="screen-256color"
# But this appears safe
export TERM="xterm-256color"
case "$(uname -s)" in
    "Darwin") ;; # Ignore macOS
    *) [[ -z $TMUX ]] || export TERM="tmux-256color" ;;
esac

# Java
export JAVA_HOME="$(
    find /usr/lib/jvm -maxdepth 1 \
    -iregex ".*java-[0-9]+-openjdk.*" -print 2>/dev/null | \
    sort -k 2.1 -nr -t "-" | head -n 1
)"

# Editor of choice
[[ -z $(command -v vim) ]] || export EDITOR="vim"

# GPG
[[ -z $(command -v tty) ]] || export GPG_TTY="$(tty)"

# Secure perms
# Don't touch umask EVER
# [[ -n $(id | grep -s "uid=0") ]] || umask 077
# Instead do something like:
# setfacl -m d:u::rwX,g::-,o::- -R "$HOME"

# Less
export PAGER="less"
export LESS="-ciMRs"
if [[ -f "$HOME/.config/less/lessfilter" ]]; then
    export LESSOPEN="|\"$HOME/.config/less/lessfilter\" %s"
fi

# Make less more friendly for non-text input files, see lesspipe(1)
if [[ -n $(command -v lesspipe) ]]; then
    export LESSOPEN="| lesspipe %s"
    export LESSCLOSE="lesspipe %s %s"
fi

# Command args

## ack
export ACK_ARGS="--smart-case"
export ACK_COLOR_FILENAME="green"
export ACK_COLOR_LINENO="white"
export ACK_COLOR_MATCH="black on_white"

## ag
AG_ARGS="-S "
AG_ARGS+="--color-match=\"47;1;30\" "
AG_ARGS+="--color-line-number=\"0;37\" "
AG_ARGS+="--color-path=\"0;32\""
export AG_ARGS

## grep
if [[ -n $(grep --help 2>&1 | grep -is "color") ]]; then
    export GREP_CLR="--color=auto"
fi
GREP_ARGS="$GREP_CLR -Iis "
GREP_ARGS+="--exclude-dir=.bzr "
GREP_ARGS+="--exclude-dir=.git "
GREP_ARGS+="--exclude-dir=.git-crypt "
GREP_ARGS+="--exclude-dir=.svn"
export GREP_ARGS
GREP_COLORS="fn=1;32:ln=0;37:ms=47;1;30:mc=47;1;30:sl=:cx=:bn=:se="
export GREP_COLORS

## rg
RG_ARGS="-S "
RG_ARGS+="--colors \"line:fg:white\" "
RG_ARGS+="--colors \"match:bg:white\" "
RG_ARGS+="--colors \"match:fg:black\" "
RG_ARGS+="--colors \"path:fg:green\""
export RG_ARGS

## sshpass
SSHPASS_ARGS="-o \"PreferredAuthentications=password\" "
SSHPASS_ARGS+="-o \"PubkeyAuthentication=no\""

# Ruby
export GEM_HOME="$HOME/.gem/ruby"
export GEM_PATH="$GEM_HOME/gems"
[[ -z $(command -v ruby) ]] || mkdir -p "$GEM_HOME"/{bin,gems}
if [[ -d "$HOME/.gem" ]] && [[ ! -f "$HOME/.gemrc" ]]; then
    {
        echo "gem: --no-format-executable --no-user-install"
        echo "install: --no-format-executable --no-user-install"
        echo "update: --no-format-executable --no-user-install"
    } >"$HOME/.gemrc"
fi

# Python
if [[ ! -f "$HOME/.config/pip/pip.conf" ]]; then
    mkdir -p "$HOME/.config/pip"
    echo "[install]" >"$HOME/.config/pip/pip.conf"
    echo "user = yes" >>"$HOME/.config/pip/pip.conf"
fi

# Go
if [[ -d "$HOME/.cache/gvm" ]]; then
    export GOROOT="$HOME/.cache/gvm/use"
    export PATH="$GOROOT/bin${PATH:+:$PATH}"
fi
if [[ -n $(command -v go) ]]; then
    GOPATH="$(go version)"
    GOPATH="${GOPATH##go version go}"
    if [[ -n $GOPATH ]]; then
        export GOPATH="$HOME/.go/v${GOPATH%% *}"
        mkdir -p "$GOPATH/bin"
    fi
fi

# Perl
export PERL_LOCAL_LIB_ROOT="$HOME/.cpan/perl5"
export PERL5LIB="$PERL_LOCAL_LIB_ROOT/lib/perl5"
export PERL_MB_OPT="--install_base \"$PERL_LOCAL_LIB_ROOT\""
export PERL_MM_OPT="INSTALL_BASE=\"$PERL_LOCAL_LIB_ROOT\""
[[ -z $(command -v perl) ]] || mkdir -p "$PERL_LOCAL_LIB_ROOT"

# Fix USER if not defined
export USER="${USER:-$(id -nu)}"

# Display
if [[ -z $DISPLAY ]] &&
   [[ -z $SSH_CONNECTION ]] &&
   [[ -d /tmp/.X11-unix ]] &&
   [[ -n $(ls /tmp/.X11-unix) ]]
then
    for x in /tmp/.X11-unix/X*; do
        export DISPLAY=":${x#/tmp/.X11-unix/X}" && break
    done; unset x
fi
# }}}

# {{{ PATH
# Find dirs that should be in PATH
unset PTH
for dir in \
    "$HOME/bin" "$HOME/.local/bin" \
    "$HOME/.config/$(basename "$MILESRC_SHELL")/scripts" \
    "${GOROOT:-/doesnotexist}/bin" "${GOPATH:-/doesnotexist}/bin" \
    "$GEM_HOME/bin" "$HOME/.rvm/bin" \
    "$PERL_LOCAL_LIB_ROOT/bin" \
    /usr/bin/core_perl /usr/bin/vendor_perl \
    "$HOME/Android/Sdk/emulator" "$HOME/Android/Sdk/platform-tools" \
    /usr/local/bin /usr/local/sbin \
    /usr/bin /usr/sbin \
    /bin /sbin
do
    [[ ! -d "$dir" ]] || PTH="${PTH:+$PTH:}$dir"
done; unset dir

# Find missing from PATH
while read -r dir; do
    [[ ! -d "$dir" ]] || PTH="${PTH:+$PTH:}$dir"
done < <(echo "$PATH" | sed "s/:/\n/g" | grep -Esv "^${PTH//:/$|^}$")
unset dir

# Set PATH
[[ -z $PTH ]] || export PATH="$PTH"
unset PTH
# }}}

# {{{ Prompt
if [[ -f "$HOME/.milesrc/shell/milesrc.prompt" ]]; then
    . "$HOME/.milesrc/shell/milesrc.prompt"
fi
# }}}

# {{{ Aliases
if [[ -n $(command -v ack-grep) ]]; then
    alias ack="ack-grep $ACK_ARGS"
elif [[ -n $(command -v ack) ]]; then
    alias ack="\ack $ACK_ARGS"
fi
[[ -z $(command -v ag) ]] || alias ag="\ag $AG_ARGS"
alias cd="mycd"
alias cp="\cp -i"
[[ -z $(command -v egrep) ]] || alias egrep="\egrep $GREP_ARGS"
[[ -z $(command -v emacs) ]] || alias emacs="\emacs -nw"
alias envg="env | grep -E"
[[ -z $(command -v sudo) ]] || alias f="sudo"
[[ -z $(command -v gdb) ]] || alias gdb="\gdb -q"
[[ -z $(command -v grep) ]] || alias grep="\grep $GREP_ARGS"
[[ -z $(command -v less) ]] || alias l="less"
[[ -n $(command -v less) ]] || alias l="more"
alias la="ls -A"
alias lag="la | grep -E"
alias ll="ls -hl"
alias lla="ll -A"
alias llag="lla | grep -E"
alias llg="ll | grep -E"
[[ -z $(command -v locate) ]] || alias locate="\locate -e --regex"
alias ls="\ls --color=auto -F"
alias lsg="ls | grep -E"
alias mine="sudo chown -R \$(id -nu):\$(id -gn)"
alias mv="\mv -i"
[[ -z $(command -v mimeopen) ]] || alias open="mimeopen"
alias nocolor="sed -r \"s/\[[0-9;]*[AKm]//g\""
alias p="ps -o pid,user,%cpu,cmd --sort=-%cpu"
alias pf="p -e --forest"
[[ -z $(command -v python2) ]] || alias pip2="python2 -m pip"
[[ -z $(command -v python3) ]] || alias pip3="python3 -m pip"
alias psg="pgrep -af"
alias psme="pgrep -afU \"\$USER\""
alias q="exit"
alias r="reset"
[[ -z $(command -v rg) ]] || alias rg="\rg $RG_ARGS"
alias scppass="scp $SSHPASS_ARGS"
case "$MILESRC_SHELL" in
    *"bash") alias srcmilesrc=". \"\$HOME/.bashrc\"" ;;
    *"zsh") alias srcmilesrc=". \"\$HOME/.zshrc\"" ;;
esac
alias sshpass="ssh $SSHPASS_ARGS"
if [[ -f /opt/sublime_text/sublime_text ]]; then
    alias sublime="/opt/sublime_text/sublime_text"
fi
[[ -z $(command -v sudo) ]] || alias sume="sudo -Es"
if [[ -n $(command -v htop) ]]; then
    alias t="htop -d 10"
    alias tu="htop -d 10 -u \"\$USER\""
else
    alias t="top -d 10"
    alias tu="top -d 10 -u \"\$USER\""
fi
alias vd="vimdiff"
[[ -z $(command -v w3m) ]] || alias w3m="\w3m -cookie"
alias which="command -v"

# Typos
alias claer="clear"
alias clar="clear"
alias clea="clear"
alias clae="clear"
alias clera="clear"
alias got="git"
alias vm="mv"
# }}}

# {{{ Functions
function devexcuse() {
    curl -s "http://developerexcuses.com" | \
        grep --color=never -oPs "<a href.+>\K.+(?=</a>)"
}

function git_clone() {
    local git_url
    local group_or_user
    local repo
    local tmp="${1%.git}"
    local url

    if [[ -n $(command -v git) ]]; then
        git clone "$1" "$2"
    else
        [[ -n $(command -v curl) ]] || return 1
        [[ $# -gt 0 ]] || return 2

        case "$tmp" in
            "git@"*)
                tmp="${tmp#git@}"
                git_url="${tmp%:*}"
                tmp="${tmp##*:}"
                group_or_user="${tmp%/*}"
                repo="${tmp##*/}"
                ;;
            "https://"*)
                tmp="${tmp#https://}"
                git_url="${tmp%%/*}"
                tmp="${tmp#*/}"
                group_or_user="${tmp%/*}"
                repo="${tmp##*/}"
                ;;
        esac

        url="https://$git_url/$group_or_user/$repo"
        case "$git_url" in
            "github.com")
                curl -LO "$url/archive/master.zip"
                [[ $? -eq 0 ]] || return 3
                unzip master.zip >/dev/null && rm -f master.zip
                [[ $? -eq 0 ]] || return 4
                if [[ $# -eq 1 ]]; then
                    mv "$repo-master" "$repo"
                else
                    mv "$repo-master" "$2"
                fi
                ;;
            "gitlab.com")
                curl -LO "$url/-/archive/master/$repo-master.tar"
                [[ $? -eq 0 ]] || return 3
                tar -xf "$repo-master.tar" && rm -f "$repo-master.tar"
                [[ $? -eq 0 ]] || return 4
                if [[ $# -eq 1 ]]; then
                    mv "$repo-master"* "$repo"
                else
                    mv "$repo-master"* "$2"
                fi
                ;;
        esac
    fi
}

function ipa() {
    local device
    local inet

    if [[ -n $(command -v ip) ]]; then
        if ip 2>&1 | grep -Eq "c.olor"; then
            ip -c -o $@ a | grep -sv "mtu" | awk '{print $2,$4}'
        else
            ip -o $@ a | grep -sv "mtu" | awk '{print $2,$4}'
        fi
    else
        while read -r line; do
            case "$line" in
                *encap*|*flags*)
                    device="$(echo "$line" | awk '{print $1}')"
                    ;;
                *inet6*addr:*)
                    inet="$(echo "$line" | awk '{print $3}')"
                    ;;
                *inet*) inet="$(echo "$line" | awk '{print $2}')"
                    ;;
                *) unset inet
                    ;;
            esac
            [[ -z $inet ]] || echo "$device $inet" | sed "s/addr://"
        done < <(ifconfig)
    fi
}

function ipr() {
    if [[ -n $(command -v ip) ]]; then
        if ip 2>&1 | grep -Eq "c.olor"; then
            ip -c -o $@ r
        else
            ip -o $@ r
        fi
    else
        (
            echo "Route Gateway Interface"
            echo "----- ------- ---------"
            netstat -nr | awk '!/Routing|Internet|Destination/ {
                if (NF == 4) {
                    print $1,$2,$4
                } else if (NF == 7) {
                    print $1,$2,$6
                }
            }'
        ) | column -t
    fi
}

function iso2usb() {
    local usage="Usage: iso2usb [-h|--help] <iso> <dev>"

    [[ $# -ne 2 ]] && echo "$usage" && return 1
    [[ ! -f "$1" ]] && echo "$usage" && return 2
    [[ ! -b $2 ]] && echo "$usage" && return 3

    sudo dd if="$1" of="$2" bs="4M"
}

function milesrc() {
    echo "Configuration via files"
    echo
    echo "    ~/.git.nostatus"
    echo "        Prompt will not show any git status for paths in"
    echo "        this file. One path per line."
    echo "    ~/.milesrc/local/local"
    echo "        Sourced last. Put your custom bash/zsh settings"
    echo "        here."
    echo "    ~/.milesrc/local/pre"
    echo "        Sourced first. Put specified ENV vars here (see"
    echo "        below)"
    echo
    echo "Configuration via ENV vars (put in ~/.milesrc/local/local"
    echo "unless otherwise specified)"
    echo
    case "$(uname -s)" in
        "Darwin")
            echo "    MILESRC_ACKNOWLEDGE_MACOS_IS_DUMB"
            echo -n "        If set, hide warnings about missing gnu "
            echo "utilities"
            echo "        on macOS."
        ;;
    esac
    echo "    MILESRC_LS_AFTER_CD"
    echo "        If set, and you alias cd to mycd, ls will be"
    echo "        automatically run after each cd. You likely don't"
    echo "        want this if you're looking at large directory"
    echo "        trees with numerous files in each directory."
    echo "    MILESRC_PROMPT"
    echo "        Should be an array, and, if set, will theme the"
    echo "        prompt. Unsetting should immediately untheme the"
    echo "        prompt. Example below:"
    echo "            delcare -a MILESRC_PROMPT"
    echo "            MILESRC_PROMPT=("
    echo "                \"host;white;blue;root;white;160\""
    echo "                \"venv;white;166\""
    echo "                \"git;light_black;white\""
    echo "                \"cwd;white;light_black\""
    echo "                \"vi_ins;white;green;vi_cmd;white;blue\""
    echo "                \"newline\""
    echo "                \"exit;white;red\""
    echo "                \"prompt;white;light_black\""
    echo "            )"
    echo "            export MILESRC_PROMPT"
    echo "        These are generally of the form:"
    echo "            section;fg_color;bg_color"
    echo "        where section is one of:"
    echo "            cwd, exit, git, host, newline, prompt, venv,"
    echo "            or vi_ins|vi_cmd"
    echo "        and valid colors are:"
    echo "            black, red, green, yellow, blue, magenta, cyan,"
    echo "            white, light_black, light_red, light_green,"
    echo "            light_yellow, light_blue, light_magenta,"
    echo "            light_cyan, light_white, or any number in 0-255"
    echo "    MILESRC_SSH_AGENT"
    echo "        If set (in ~/.milesrc/local/pre), start an"
    echo "        ssh-agent."
    echo "    MILESRC_TMUX"
    echo "        If set (in ~/.milesrc/local/pre), attach to tmux"
    echo "        session."
    echo "    MILESRC_VI_BINDINGS"
    echo "        If set (in ~/.milesrc/local/pre), use vi"
    echo "        keybindings."
}

function mycd() {
    # local in
    local -a ls_args
    # local possible
    # local seek

    ls_args+=("--color=auto")
    ls_args+=("-F")

    #if [[ $# -eq 0 ]] || [[ -d "$*" ]] || [[ $* == "-" ]]; then
    \cd "$@" >/dev/null || return
    [[ -z $MILESRC_LS_AFTER_CD ]] || ls ${ls_args[*]}
    [[ -z $TMUX ]] || tmux setenv -g PWD "$PWD"
    #else
    #    echo "cd: no such file or directory: $*"
    #    in="$(dirname "$*")"
    #    seek="$(basename "$*")"
    #    possible="$(
    #        find -L "$in" -maxdepth 1 -type d -iname "$seek*" \
    #        2>/dev/null | sort | head -n 1
    #    )"
    #    if [[ -n $possible ]] && [[ -d "$possible" ]]; then
    #        echo "Guessing you meant: $possible"
    #        echo
    #        \cd "$possible" >/dev/null || return
    #        [[ -z $MILESRC_LS_AFTER_CD ]] || ls $ls_args
    #    fi
    #fi
    return 0
}

function os() {
    grep --color=never -ioPs "^NAME\=\"?\K[^\"]+" /etc/os-release
}

function remove_spaces_in_names() {
    local dir
    local -a look_in=(".")
    local rnm

    for dir in "$@"; do
        if [[ ! -d "$dir" ]]; then
            echo "$dir does not exist"
            return
        fi
    done; unset dir

    [[ $# -eq 0 ]] || look_in=("$@")

    # Determine rename command
    rnm="$(command -v rename)"
    if [[ -e /usr/bin/vendor_perl/rename ]]; then
        rnm="/usr/bin/vendor_perl/rename"
    elif [[ -e /usr/bin/site_perl/rename ]]; then
        rnm="/usr/bin/site_perl/rename"
    fi

    # May need to cpan install File::Rename
    if [[ -z $rnm ]] || [[ -z $($rnm -h | grep -s "perl") ]]; then
        echo "Please run \"sudo cpan File::Rename\""
        return
    fi

    find "${look_in[@]}" -depth -name "* *" \
        -execdir "$rnm" -v "s/ /_/g" "{}" +
}

case "$MILESRC_SHELL" in
    *"bash")
        function reset_completions() {
            [[ -d "$HOME/.config/bash/complete" ]] || return
            while read -r comp; do
                . "$HOME/.config/bash/complete/$comp"
            done < <(find "$HOME/.config/bash/complete" -type f)
            unset comp
        }
        ;;
    *"zsh")
        function reset_completions() {
            local comps=("$HOME/.config/zsh/complete/_"*)
            unfunction $comps:t 2>/dev/null
            autoload -U $comps:t
        }
        ;;
esac

function simplehttp() {
    local port="${2:-8080}"

    case "${1:--h}" in
        "-h"|"--help") ;;
        *)
            if [[ -z $(command -v $1) ]]; then
                echo "$1 is not installed"
                return
            fi
            ;;
    esac

    case "$1" in
        "busybox") busybox httpd -f -p "$port" ;;
        "nginx")
            mkdir -p /tmp/simplehttp
            cat >/tmp/simplehttp/nginx.conf<<EOF
daemon off;
error_log stderr;

events {
    worker_connections 1024;
}

http {
    client_body_temp_path /tmp/simplehttp 1 2;
    fastcgi_temp_path /tmp/simplehttp 1 2;
    uwsgi_temp_path /tmp/simplehttp 1 2;
    scgi_temp_path /tmp/simplehttp 1 2;

    server {
        access_log /dev/stdout;
        autoindex on;
        listen $port;
        root $(pwd);
        server_name localhost;
    }
}

pid /tmp/simplehttp/nginx.pid;
worker_processes 1;
EOF

            nginx -c /tmp/simplehttp/nginx.conf -p /tmp/simplehttp
            rm -rf /tmp/simplehttp
            ;;
        "perl")
            plackup -MPlack::App::Directory \
                -e 'Plack::App::Directory->new(root=>".");' -p "$port"
            ;;
        "php") php -S "0.0.0.0:$port" ;;
        "python2") python2 -m SimpleHTTPServer "$port" ;;
        "python3") python3 -m http.server "$port" ;;
        "ruby") ruby -e httpd -r un -- -p "$port" . ;;
        "twisted") twistd -n web --listen "tcp:$port" --path . ;;
        *)
            echo "Usage: simplehttp <lang> [port]"
            echo
            echo "DESCRIPTION"
            echo -n "    Start an HTTP server using the specified "
            echo "language and port (default: 8080)."
            echo
            echo "OPTIONS"
            echo "    -h, --help    Display this help message"
            echo
            echo "LANGUAGES"
            [[ -z $(command -v busybox) ]] || echo "    busybox"
            [[ -z $(command -v nginx) ]] || echo "    nginx"
            [[ -z $(command -v plackup) ]] || echo "    perl"
            [[ -z $(command -v php) ]] || echo "    php"
            [[ -z $(command -v python2) ]] || echo "    python2"
            [[ -z $(command -v python3) ]] || echo "    python3"
            [[ -z $(command -v ruby) ]] || echo "    ruby"
            [[ -z $(command -v python3) ]] || echo "    twisted"
            ;;
    esac
}

function tdump() {
    local cap
    local group
    local name

    if [[ -z $(command -v tcpdump) ]]; then
        echo "tcpdump is not installed"
        return
    fi

    cap="$(echo "$@" | grep -Eos "\S+\.pcap")"

    sudo tcpdump -n -vvv $@

    [[ -z $(id | grep -s "uid=0") ]] || return 0

    group="$(id -gn)"
    name="$(id -nu)"

    if [[ -n $cap ]] && [[ -f "$cap" ]]; then
        sudo chown "$name":"$group" "$cap"
    fi
}

function update_grub() {
    for mkconfig in \
        grub-mkconfig \
        grub2-mkconfig
    do
        [[ -n $(command -v "$mkconfig") ]] || continue
        for cfg in \
            /boot/grub \
            /boot/grub2
        do
            [[ -d "$cfg" ]] || continue
            sudo "$mkconfig" -o "$cfg/grub.cfg"
        done
    done
}

function x() {
    case "$1" in
        "-h"|"--help")
            echo "Usage: x <archive>"
            echo
            echo "DESCRIPTION"
            echo -n "    Automatically extract the archive, "
            echo "regardless of type."
            echo
            echo "OPTIONS"
            echo "    -h, --help    Display this help message"
            echo
            echo "SUPPORTED TYPES"
            [[ -z $(command -v 7z) ]] || echo "    7z"
            [[ -z $(command -v bzip2) ]] || echo "    bz2"
            [[ -z $(command -v gzip) ]] || echo "    gz"
            [[ -z $(command -v jar) ]] || echo "    jar"
            [[ -z $(command -v unrar) ]] || echo "    rar"
            [[ -z $(command -v rpm2cpio) ]] || echo "    rpm"
            if [[ -n $(command -v tar) ]]; then
                echo "    tar"
                echo "    tar.gz"
                echo "    tgz"
                echo "    txz"
            fi
            [[ -z $(command -v xz) ]] || echo "    xz"
            [[ -z $(command -v unzip) ]] || echo "    zip"
            [[ -z $(command -v zstd) ]] || echo "    zstd"
            ;;
        *".tar"*|*".tgz"|*".txz")
            if [[ -z $(command -v tar) ]]; then
                echo "tar is not installed"
            else
                tar -xf $@
            fi
            ;;
        *".7z")
            if [[ -z $(command -v 7z) ]]; then
                echo "p7zip is not installed"
            else
                7z x $@
            fi
            ;;
        *".bz2")
            if [[ -z $(command -v bzip2) ]]; then
                echo "bzip2 is not installed"
            else
                bzip2 -dk $@
            fi
            ;;
        *".gz")
            if [[ -z $(command -v gzip) ]]; then
                echo "gzip is not installed"
            else
                gzip -dk $@
            fi
            ;;
        *".jar")
            if [[ -z $(command -v jar) ]]; then
                echo "java is not installed"
            else
                jar -xf $@
            fi
            ;;
        *".rar")
            if [[ -z $(command -v unrar) ]]; then
                echo "unrar is not installed"
            else
                unrar x $@
            fi
            ;;
        *".rpm")
            if [[ -z $(command -v rpm2cpio) ]]; then
                echo "rpm2cpio is not installed"
            elif [[ -z $(command -v cpio) ]]; then
                echo "rpm2cpio is not installed"
            else
                rpm2cpio $@ | cpio -idmv
            fi
            ;;
        *".xz")
            if [[ -z $(command -v xz) ]]; then
                echo "xz is not installed"
            else
                xz -dk $@
            fi
            ;;
        *".zip")
            if [[ -z $(command -v unzip) ]]; then
                echo "unzip is not installed"
            else
                unzip $@
            fi
            ;;
        *".zst")
            if [[ -z $(command -v zstd) ]]; then
                echo "zstd is not installed"
            elif [[ -z $(command -v tar) ]]; then
                tar -I "zstd -T0" -xf $@
            else
                echo "tar is not installed"
            fi
            ;;
        *)
            if [[ -n $(command -v aunpack) ]]; then
                aunpack $@
            else
                echo "Unknown archive format!"
            fi
            ;;
    esac
}
# }}}

case "$MILESRC_SHELL" in
    *"bash")
        # {{{ Bash completions
        if [[ -d "$HOME/.config/bash/complete" ]]; then
            while read -r comp; do
                . "$HOME/.config/bash/complete/$comp"
            done < <(find "$HOME/.config/bash/complete" -type f)
            unset comp
        fi

        # Complete gimme function
        if [[ -n $(command -v apt-cache) ]]; then
            function _apt_install_complete() {
                mapfile -t COMPREPLY < <(
                    apt-cache --no-generate pkgnames "$2"
                )
            }
            complete -F _apt_install_complete gimme
        elif [[ -n $(command -v brew) ]]; then
            function _brew_install_complete() {
                mapfile -t COMPREPLY < <(brew search "$2")
            }
            complete -F _brew_install_complete gimme
        elif [[ -n $(command -v crew) ]]; then
            function _crew_install_complete() {
                mapfile -t COMPREPLY < <(
                    crew search "$2" | awk '{print $1}'
                )
            }
            complete -F _crew_install_complete gimme
        elif [[ -n $(command -v pacman) ]]; then
            if [[ -n $(command -v ruaur) ]]; then
                function _ruaur_install_complete() {
                    mapfile -t COMPREPLY < <(
                        ruaur -Ss "$2" --names-only | \
                        grep -Es "^$2" | sort -u
                    )
                }
                complete -F _ruaur_install_complete gimme
            else
                function _pacman_install_complete() {
                    mapfile -t COMPREPLY < <(
                        pacman --color=never -Ss "$2" | \
                        grep -oPs "^[^/]+/\K$2\S*" | sort -u
                    )
                }
                complete -F _pacman_install_complete gimme
            fi
        fi
        # }}}
        ;;
    *"zsh")
        # {{{ Zsh completions
        if [[ -d "$HOME/.config/zsh/complete" ]]; then
            fpath+=("$HOME/.config/zsh/complete")
        fi

        for dir in \
            "$HOME/.config/zsh/plugins/zsh-completions/src" \
            /usr/share/zsh/plugins/zsh-completions/src \
            /usr/share/zsh/site-functions
        do
            [[ ! -d "$dir" ]] || fpath+=("$dir")
        done; unset dir

        if [[ $ZSHV -gt 42 ]]; then
            if [[ -z $(command -v compdef) ]]; then
                autoload -Uz compinit && compinit -u
            fi
        fi

        # Syntax highlighting (must come after all zle -N calls and
        # compinit)
        typeset -A ZSH_HIGHLIGHT_STYLES
        ZSH_HIGHLIGHT_STYLES[alias]="fg=blue"
        ZSH_HIGHLIGHT_STYLES[builtin]="fg=blue"
        ZSH_HIGHLIGHT_STYLES[command]="fg=blue"
        ZSH_HIGHLIGHT_STYLES[commandseparator]="fg=green"
        ZSH_HIGHLIGHT_STYLES[comment]="fg=green,bold"
        ZSH_HIGHLIGHT_STYLES[dollar-double-quoted-argument]="fg=red,bold"
        ZSH_HIGHLIGHT_STYLES[dollar-single-quoted-argument]="fg=cyan"
        ZSH_HIGHLIGHT_STYLES[double-quoted-argument]="fg=red,bold"
        ZSH_HIGHLIGHT_STYLES[function]="fg=blue"
        ZSH_HIGHLIGHT_STYLES[hashed-command]="fg=blue"
        ZSH_HIGHLIGHT_STYLES[precommand]="fg=white,underline"
        ZSH_HIGHLIGHT_STYLES[reserved-word]="fg=yellow"
        ZSH_HIGHLIGHT_STYLES[single-quoted-argument]="fg=cyan"
        ZSH_HIGHLIGHT_STYLES[unknown-token]="fg=red"
        for dir in \
            "$HOME/.config/zsh/plugins/zsh-syntax-highlighting" \
            /usr/share/zsh/plugins/zsh-syntax-highlighting \
            /usr/share/zsh-syntax-highlighting
        do
            [[ ! -d "$dir" ]] || . "$dir/zsh-syntax-highlighting.zsh"
            [[ ! -d "$dir" ]] || break
        done; unset dir

        # Complete gimme function
        if [[ -n $(command -v apt-cache) ]]; then
            function _apt_install_complete() {
                reply=($(apt-cache --no-generate pkgnames "$1"))
            }
            compctl -K _apt_install_complete gimme
        elif [[ -n $(command -v brew) ]]; then
            function _brew_install_complete() {
                reply=($(brew search "$1"))
            }
            compctl -K _brew_install_complete gimme
        elif [[ -n $(command -v crew) ]]; then
            function _crew_install_complete() {
                reply=($(crew search "$1" | awk '{print $1}'))
            }
            compctl -K _crew_install_complete gimme
        elif [[ -n $(command -v pacman) ]]; then
            if [[ -n $(command -v ruaur) ]]; then
                compdef _gnu_generic ruaur
                function _ruaur_install_complete() {
                    reply=($(ruaur -Ss "$1" --names-only))
                }
                compctl -K _ruaur_install_complete gimme
            else
                function _pacman_install_complete() {
                    reply=($(
                        pacman --color=never -Ss "$1" | \
                        grep -oPs "^[^/]+/\K^\S*"
                    ))
                }
                compctl -K _pacman_install_complete gimme
            fi
        fi
        # }}}
        ;;
esac

# {{{ Wrap-up
# Xterm
if [[ -n $(command -v xrdb) ]] &&
   [[ -f "$HOME/.Xresources" ]] &&
   [[ -z $SSH_CONNECTION ]]
then
    xrdb -load "$HOME/.Xresources" 2>/dev/null
fi

# Local stuff
if [[ -f "$HOME/.milesrc/local/local" ]]; then
    . "$HOME/.milesrc/local/local"
fi
# }}}
