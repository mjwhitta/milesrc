#!/usr/bin/env bash
# A wrapper script for nmap that organizes scan output.
# by Miles Whittaker <mjwhitta@gmail.com>
#
# --------------------------------------------------------------------
# The MIT License (MIT)
#
# Copyright (c) 2017 Miles Whittaker
#
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation files
# (the "Software"), to deal in the Software without restriction,
# including without limitation the rights to use, copy, modify, merge,
# publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
# BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
# --------------------------------------------------------------------

function nmapplus() {
    np_cleanup() {
        unset arg args dir force host hosts iface ipv6 os ports prot
        unset services technique timeout udp
        unset -f np_cleanup np_usage
    }

    np_scan_host() {
        host="$1"

        echo "Scanning $host"

        case "$host" in
            *[^0-9.]*) dir="${host/.*/}" ;;
            *) dir="$host" ;;
        esac

        mkdir -p nmap_scans/$dir
        (
            cd nmap_scans/$dir
            if [[ -f ${prot}.nmap ]] && [[ -z $force ]]; then
                echo "Already done, skipping"
            else
                echo nmap $ipv6 $os $iface $timeout -oA $prot $ports \
                    $force $technique $services $udp $host

                # Ugh, have to use eval
                eval nmap $ipv6 $os $iface $timeout -oA $prot $ports \
                    $force $technique $services $udp $host
            fi
        )
        echo
    }

    np_scan_hosts() {
        echo "Reading hosts from $1..."
        for host in $(cat $1 | awk '{print $1}'); do
            np_scan_host $host
        done
    }

    np_usage() {
        echo "Usage: nmapplus [OPTIONS] [host1]...[hostN]"
        echo
        echo "Organizes your nmap scans"
        echo
        echo "Options:"
        echo "    -6                      Enable IPv6 scanning"
        echo "    -f, --force             Force scan"
        echo "    -h, --help              Display this help message"
        echo "    --hosts=FILE            Use hosts from file (split"
        echo "                            on whitespace and use first"
        echo "                            token from each line)"
        echo "    -i, --iface=IFACE       Use the specified interface"
        echo "                            for scanning"
        echo "    -n, --topn=NUM          Only scan the top N ports"
        echo "    -o, --os                Enable OS detection"
        echo "    -p, --ports=PORTS       Only scan specified ports"
        echo "                            (default: all ports)"
        echo "    -s, --services          Identity running services"
        echo "    -t, --technique=TECH    Scan technique: syn,"
        echo "                            connect, ack, window,"
        echo "                            maimon, null, fin, xmas"
        echo "    --timeout=TIMEOUT       Give up on host after"
        echo "                            specified time (e.g. 15m)"
        echo "    -u, --udp               UDP scan"
        echo
        np_cleanup
    }

    declare -a args hosts
    unset force iface ipv6 os services technique timeout udp
    prot="tcp"
    ports="-p 1-65535"

    while [[ $# -gt 0 ]]; do
        case "$1" in
            "--") shift && args+=("$@") && break ;;
            "-6") ipv6="-6" ;;
            "-f"|"--force") force="-Pn" ;;
            "-h"|"--help") np_usage; return 0 ;;
            "--hosts"*)
                case "$1" in
                    "--"*"="*)
                        arg="$(echo "$1" | sed -r "s/[^=]+=//")"
                        [[ -n $arg ]] || usage 1
                        ;;
                    *)
                        shift; [[ $# -eq 0 ]] && np_usage && return 1
                        arg="$1"
                        ;;
                esac
                hosts+=("$arg")
                ;;
            "-i"|"--iface"*)
                case "$1" in
                    "--"*"="*)
                        arg="$(echo "$1" | sed -r "s/[^=]+=//")"
                        [[ -n $arg ]] || usage 1
                        ;;
                    *)
                        shift; [[ $# -eq 0 ]] && np_usage && return 1
                        arg="$1"
                        ;;
                esac
                iface="-e $arg"
                ;;
            "-n"|"--topn"*)
                case "$1" in
                    "--"*"="*)
                        arg="$(echo "$1" | sed -r "s/[^=]+=//")"
                        [[ -n $arg ]] || usage 1
                        ;;
                    *)
                        shift; [[ $# -eq 0 ]] && np_usage && return 1
                        arg="$1"
                        ;;
                esac
                ports="--top-ports $arg"
                ;;
            "-o"|"--os") os="-A" ;;
            "-p"|"--ports"*)
                case "$1" in
                    "--"*"="*)
                        arg="$(echo "$1" | sed -r "s/[^=]+=//")"
                        [[ -n $arg ]] || usage 1
                        ;;
                    *)
                        shift; [[ $# -eq 0 ]] && np_usage && return 1
                        arg="$1"
                        ;;
                esac
                ports="-p $arg"
                ;;
            "-s"|"--services") services="-sV" ;;
            "-t"|"--technique"*)
                case "$1" in
                    "--"*"="*)
                        arg="$(echo "$1" | sed -r "s/[^=]+=//")"
                        [[ -n $arg ]] || usage 1
                        ;;
                    *)
                        shift; [[ $# -eq 0 ]] && np_usage && return 1
                        arg="$1"
                        ;;
                esac
                case "$arg" in
                    "syn") technique="-sS" ;;
                    "connect") technique="-sT" ;;
                    "ack") technique="-sA" ;;
                    "window") technique="-sW" ;;
                    "maimon") technique="-sM" ;;
                    "null") technique="-sN" ;;
                    "fin") technique="-sF" ;;
                    "xmas") technique="-sX" ;;
                    *) usage 1 ;;
                esac
                ;;
            "--timeout"*)
                case "$1" in
                    "--"*"="*)
                        arg="$(echo "$1" | sed -r "s/[^=]+=//")"
                        [[ -n $arg ]] || usage 1
                        ;;
                    *)
                        shift; [[ $# -eq 0 ]] && np_usage && return 1
                        arg="$1"
                        ;;
                esac
                timeout="--host-timeout $arg"
                ;;
            "-u"|"--udp") udp="-sU" && prot="udp" ;;
            *) args+=("$1") ;;
        esac
        shift
    done
    [[ -z ${args[@]} ]] || set -- "${args[@]}"

    [[ $# -eq 0 ]] || hosts+=($@)
    [[ -z $ipv6 ]] || prot="${prot}6"

    [[ ${#hosts[@]} -eq 0 ]] && np_usage && return 2

    for arg in "${hosts[@]}"; do
        [[ ! -f $arg ]] || np_scan_hosts $arg
        [[ -f $arg ]] || np_scan_host $arg
    done

    np_cleanup
}

if [[ -n ${BASH_SOURCE[0]} ]]; then
    case "$0" in
        *"bash") ;;
        *) nmapplus "$@" ;;
    esac
fi
