# shellcheck disable=SC1090,SC1091,SC2207 shell=bash

# If not running interactively, don't do anything
[[ $- == *i* ]] || return

# {{{ Env Vars
# Let's make an educated guess
for dir in code projs projects src; do
    [[ -d "$HOME/$dir" ]] && export PROJS="$HOME/$dir" && break
done; unset dir
# }}}

# {{{ PATH
# }}}

# {{{ Aliases
[[ -z $(command -v ascii) ]] || alias asciitable="ascii | tail -n +8"
alias dt="tmux -2 new -d -s"
alias et="exec tmux -2 new -A -s"
alias eth="exec tmux -2 new -A -s \"\$(hostname -s)\""
alias j="cd \$(cat \$HOME/.proj 2>/dev/null)"
alias nslookup="echo \"use 'dig +short [-x]' instead\" #"
[[ -z $(command -v pwsh) ]] || alias powershell="TERM=xterm pwsh"
alias save="pwd >\$HOME/.proj"

# Git aliases
if [[ -n $(command -v git) ]]; then
    full="--date=format-local:\"%F_%H%M%S\" --full-history"
    minimal="-b --color-words=. --ignore-blank-lines --minimal"
    tformat="tformat:\"%Cred%h %Cgreen%cd %Cblue%an%Creset %s\""

    # shellcheck disable=SC2139
    alias diff="git diff $minimal"
    alias gc="git gc --aggressive --prune"
    # shellcheck disable=SC2139
    alias gd="git diff $minimal"
    # shellcheck disable=SC2139
    alias gl="git log $full --pretty=$tformat"
    alias grh="git reset --hard"
    alias gs="git status -bs"
    # shellcheck disable=SC2139
    alias gsm="git show $minimal"

    unset full minimal tformat
fi

# Neovim/Vim/Vi aliases
if [[ -n $(command -v nvim) ]]; then
    alias vd="nvim -d"
    alias vi="nvim"
    alias vim="nvim"
elif [[ -n $(command -v vim) ]]; then
    alias vd="vim -d"
    alias vi="vim"
elif [[ -n $(command -v vi) ]]; then
    alias vd="vi -d"
    alias vim="vi"
fi
# }}}

# {{{ Functions
function goplay() {
    [[ -n $(command -v go) ]] || return

    case "${1:-edit}" in
        "build")
            go build -ldflags "-s -w" -o "${2:-goplay}" --trimpath \
                /tmp/goplay.go
            ;;
        "edit")
            [[ -f /tmp/goplay.go ]] || goplay reset
            vim /tmp/goplay.go
            go fmt /tmp/goplay.go >/dev/null
            ;;
        "fmt") go fmt /tmp/goplay.go >/dev/null ;;
        "reset")
            cat >/tmp/goplay.go <<EOF
package main

import (
    // "bufio"
    // "bytes"
    // "encoding/json"
    "flag"
    "fmt"
    // "io"
    // "net/http"
    // "net/http/httputil"
    // "net/url"
    // "os"
    // "path/filepath"
    // "slices"
    // "sort"
    // "strings"
    // "time"
)

func init() {
    flag.Parse()
}

func main() {
    fmt.Printf("\n")
}
EOF
            go fmt /tmp/goplay.go >/dev/null
            ;;
        "run") go run /tmp/goplay.go "${@:2}" ;;
        *)
            cat <<EOF
Usage: ${0} [ACTION] [args]

ACTIONS
    build    Compiles /tmp/goplay.go, takes an optional name
    edit     Opens /tmp/goplay.go in vim
    help     Display this help message
    reset    Resets /tmp/goplay.go to default
    run      Runs /tmp/goplay.go, passes remaining cli args

EOF
            ;;
    esac
}

function moon() { clear; curl -s wttr.in/Moon | head -n -2; }

function weather() {
    clear
    url="wttr.in/~${1:-Lafayette,IN}?Q"
    [[ $COLUMNS -ge 125 ]] || url="${url}n"
    curl -s "$url" | head -n -2
    unset url
}

function wunder() {
    echo -e "\nLAF\nX\n" | nc rainmaker.wunderground.com 23 | \
    grep --color=none -A 2 "Temp(F)"
}

# I like ruby-zoom, but in case it's not installed, create functions
if [[ ! -d "$HOME/.rvm" ]] && ! command -v z | grep -qs "gem"; then
    function z() {
        if [[ -n $(command -v rg) ]]; then
            rg --no-messages --smart-case "$@"
        elif [[ -n $(command -v ag) ]]; then
            ag --silent --smart-case "$@"
        elif [[ -n $(command -v ack-grep) ]]; then
            ack-grep -s --smart-case "$@"
        elif [[ -n $(command -v ack) ]]; then
            ack -s --smart-case "$@"
        elif grep --help 2>&1 | grep -Eiqs "\s*-P"; then
            grep -HIinPrs "$@"
        else
            grep -EHIinrs "$@"
        fi
    }

    function zf() {
        find . -regextype posix-extended -iregex ".*$*.*" -print
    }
fi
# }}}

case "$MILESRC_SHELL" in
    *bash)
        # {{{ Bash completions
        # Complete arTTY
        if [[ -n $(command -v arTTY) ]]; then
            function _arTTY_complete() {
                mapfile -t COMPREPLY < <(arTTY --ls -m "^$2" -p)
            }
            complete -F _arTTY_complete art artty arTTY
        fi
        # }}}
        ;;
    *zsh)
        # {{{ Zsh completions
        # Complete arTTY
        if [[ -n $(command -v arTTY) ]]; then
            if [[ -n $(command -v compdef) ]]; then
                compdef _gnu_generic art artty arTTY
            fi
            function _arTTY_complete() {
                # shellcheck disable=SC2034
                reply=($(arTTY --ls -p))
            }
            compctl -K _arTTY_complete arTTY
        fi

        # Complete ruby-zoom commands
        if [[ -n $(command -v compdef) ]]; then
            compdef _gnu_generic z zc zf zg zl zr
        fi
        # }}}
        ;;
esac

# {{{ Wrap-up
# Security stuff
if [[ -f "$HOME/.milesrc/local/security" ]]; then
    . "$HOME/.milesrc/local/security"
fi

# Config for this specific host
if [[ -f "$HOME/.milesrc/local/$(hostname -s)" ]]; then
    . "$HOME/.milesrc/local/$(hostname -s)"
fi

[[ -n $(command -v arTTY) ]] || alias arTTY="clear"
arTTY
# }}}
