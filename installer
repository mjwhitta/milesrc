#!/usr/bin/env bash

### Helpers begin
check_deps() {
    for d in "${deps[@]}"; do
        [[ -n $(command -v "$d") ]] || errx 128 "$d is not installed"
    done; unset d
}
err() { echo -e "${color:+\e[31m}[!] $*\e[0m"; }
errx() { echo -e "${color:+\e[31m}[!] ${*:2}\e[0m"; exit "$1"; }
good() { echo -e "${color:+\e[32m}[+] $*\e[0m"; }
info() { echo -e "${color:+\e[37m}[*] $*\e[0m"; }
long_opt() {
    local arg shift="0"
    case "$1" in
        "--"*"="*) arg="${1#*=}"; [[ -n $arg ]] || usage 127 ;;
        *) shift="1"; shift; [[ $# -gt 0 ]] || usage 127; arg="$1" ;;
    esac
    echo "$arg"
    return $shift
}
subinfo() { echo -e "${color:+\e[36m}[=] $*\e[0m"; }
warn() { echo -e "${color:+\e[33m}[-] $*\e[0m"; }
### Helpers end

link() {
    info "Linking directories and files..."
    local from to
    for entry in "${files[@]}"; do
        from="$here/${entry/:*/}"
        to="$(eval echo "${entry/*:/}")"

        if [[ ! -e "$from" ]]; then
            warn "$from does not exist"
            continue
        fi

        local link="$(find "$to" -type l -printf "%l" 2>/dev/null)"
        if [[ -n $link ]]; then
            [[ $link != "$from" ]] || continue
            warn "Removing symlink $to"
            rm "$to"
        elif [[ -e "$to" ]] && [[ -z $force ]]; then
            warn "Moving $to to $to.$backup"
            mv "$to" "$to.$backup"
        elif [[ -d "$to" ]]; then
            warn "Removing directory $to"
            rm -rf "$to"
        elif [[ -f "$to" ]]; then
            warn "Removing file $to"
            rm -f "$to"
        else
            # info "Ensuring $(dirname $to) exists"
            mkdir -p "$(dirname "$to")"
        fi

        good "Symlinking $from to $to"
        ln -s "$from" "$to"
    done; unset entry
    info "Successfully linked milesrc"

    if [[ -n $install_vim_plugins ]]; then
        if [[ -z $(command -v git) ]]; then
            err "Can not install vim plugins without git"
        elif [[ ! -f "$here/vim/autoload/plug.vim" ]]; then
            warn "Can not install vim plugins without vim-plug"
        else
            info "Installing vim plugins... "
            vim_plugins
        fi
    fi
}

link_status() {
    local from to
    for entry in "${files[@]}"; do
        from="$here/${entry/:*/}"
        to="$(eval echo "${entry/*:/}")"

        if [[ ! -e "$from" ]]; then
            warn "$from does not exist"
            continue
        fi

        local link="$(find "$to" -type l -printf "%l" 2>/dev/null)"
        if [[ -n $link ]]; then
            if [[ $link == "$from" ]]; then
                good "$to is linked"
            else
                warn "$to is not linked"
            fi
        else
            warn "$to is not linked"
        fi
    done; unset entry

    if [[ -d "$here/vim" ]]; then
        if [[ -d "$here/vim/plugs" ]]; then
            good "vim plugins are installed"
        else
            warn "vim plugins are not installed"
        fi
    fi
}

unlink() {
    info "Unlinking directories and files..."
    local from to
    for entry in "${files[@]}"; do
        from="$here/${entry/:*/}"
        to="$(eval echo "${entry/*:/}")"

        local link="$(find "$to" -type l -printf "%l" 2>/dev/null)"
        if [[ -n $link ]]; then
            if [[ $link == "$from" ]]; then
                good "Removing symlink for $to"
                rm "$to"
            else
                err "Did not unlink $to as it was not linked"
            fi
        fi

        if [[ ! -e "$to" ]] && [[ -e "$to.$backup" ]]; then
            warn "Restoring $to.$backup to $to"
            mv "$to.$backup" "$to"
        elif [[ -e "$to" ]] && [[ -z $link ]]; then
            err "Could not unlink $to as it was not a symlink"
        fi

        if [[ -e "$to.$backup" ]]; then
            err "Did not restore backup of $to"
        fi
    done; unset entry
    info "Successfully unlinked milesrc"

    if [[ -d "$here/vim/plugs" ]]; then
        info "Removing vim plugins... "
        rm -rf "$here/vim/plugs"
    fi
}

usage() {
    cat <<EOF
Usage: ${0##*/} [OPTIONS] <action>

Options:
    -f, --force    Do not make backups
    -h, --help     Display this help message
    --nocolor      Disable colorized output
    -v, --vim      Install vim plugins when linking

Actions:
    link      Back up existing dotfiles and symlink milesrc
    status    Show what's linked and what isn't
    unlink    Remove symlinks and restore old configs

EOF
    exit "$1"
}

vim_plugins() {
    mkdir -p "$here/vim/plugs"
    vim -c :PlugUpgrade -c :q
    [[ $? -eq 0 ]] || exit $?
    rm -f "$here/vim/autoload/plug.vim.old"
    vim -c :PlugUpdate -c ":sleep 1" -c :q -c :q
    [[ $? -eq 0 ]] || exit $?
}

declare -a args deps
unset force help install_vim_plugins
backup="milesrc.bak"
color="true"
here="$(pwd)"

# Check for missing dependencies
check_deps

# Parse command line options
while [[ $# -gt 0 ]]; do
    case "$1" in
        "--") shift && args+=("$@") && break ;;
        "-f"|"--force") force="true" ;;
        "-h"|"--help") help="true" ;;
        "--nocolor") unset color ;;
        "-v"|"--vim") install_vim_plugins="true" ;;
        *) args+=("$1") ;;
    esac
    shift
done
[[ ${#args[@]} -eq 0 ]] || set -- "${args[@]}"

# Check for valid params
[[ -z $help ]] || usage 0
[[ $# -eq 1 ]] || usage 1

declare -a files
if [[ -f files ]]; then
    while read -r file; do
        files+=("$file")
    done < <(grep -Ev "^(\s*#|$)" files); unset file
else
    while read -r file; do
        files+=("$file")
    done < <(grep -Ev "^(\s*#|$)" files.default); unset file
fi

case "$1" in
    "link") link ;;
    "status") link_status ;;
    "unlink") unlink ;;
    *) usage 2 ;;
esac
